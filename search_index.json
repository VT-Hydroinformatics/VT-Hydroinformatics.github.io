[["index.html", "Hydroinformatics at VT Chapter 1 Introduction 1.1 How to use these materials 1.2 Table of contents:", " Hydroinformatics at VT JP Gannon 2021-03-11 Chapter 1 Introduction There will be information here about prerequisite resources and suggested readings. For questions, suggestions, activity answer keys, etc.: jpgannon at vt.edu 1.1 How to use these materials At the top of each chapter there is a link to a github repository. In each repository is the code that produces each chapter and a version where the code chunks within it are blank. These repositories are all template repositories, so you can easily copy them to your own github space by clicking Use This Template on the repo page. In my class, I work through the each document, live coding with students following along.Typically I ask students to watch as I code and explain the chunk and then replicate it on their computer. Depending on the lesson, I will ask students to try some of the chunks before I show them the code as an in-class activity. Some chunks are explicitly designed for this purpose and are typically labeled a “challenge.” Chapters called ACTIVITY are either homework or class-period-long in-class activities. The code chunks in these are therefore blank. If you would like a key for any of these, please just send me an email. 1.2 Table of contents: 2 Intro to Plotting: Introduction to plotting with ggplot. 3 R Tidyverse Programming Basics: Introduction to basic R syntax and dplyr verbs. 4 ACTIVITY Intro Skills: Activity to practice basic plotting and programming. 5 Introduction to Basic Statistics: Introcutiong to basic ways to measure a data distribution. 6 ACTIVITY Intro Stats: Activity to practice basic statistics concepts. 7 Joins, Pivots, and USGS dataRetrieval: Joins and Pivots, using USGS dataRetrieval to generate examples. 8 ACTIVITY Joins Pivots dataRetrieval: Activity to practice Joins, Pivots, and dataRetrieval. 9 ACTIVITY Summative 1: First summative assessment/practice. 10 Flow Duration Curves: Building and exploring flow duration curves. 11 Low Flow Analysis: How to calculate low-flow statistics (ex: 7Q10, 1Q10). 12 Flood Frequency Analysis and Creating Functions: Flood frequency analysis and making your own functions. 13 Geospatial data in R - Vector: Geospatial Data in R: Vector "],["Plotting.html", "Chapter 2 Intro to Plotting 2.1 Download and install tidyverse library 2.2 Reading data 2.3 Our first ggplot 2.4 Change point type 2.5 Set colors 2.6 Controlling color with a third variable and other functions 2.7 Plotting multiple groups 2.8 Facets 2.9 Two variable faceting 2.10 Boxplots 2.11 More about color, size, etc 2.12 Multiple geoms", " Chapter 2 Intro to Plotting Get this document and a version with empty code chunks at the template repository on github: https://github.com/VT-Hydroinformatics/1-Intro-plotting-R 2.1 Download and install tidyverse library We will use the tidyverse a lot this semester. It is a suite of packages that handles plotting and data wrangling efficiently. You only have to install the library once. You have to load it using the library() function each time you start an R session. #install.packages(&quot;tidyverse&quot;) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.3 ✓ purrr 0.3.4 ## ✓ tibble 3.1.0 ✓ dplyr 1.0.5 ## ✓ tidyr 1.1.3 ✓ stringr 1.4.0 ## ✓ readr 1.4.0 ✓ forcats 0.5.0 ## Warning: package &#39;ggplot2&#39; was built under R version 3.6.2 ## Warning: package &#39;readr&#39; was built under R version 3.6.2 ## Warning: package &#39;purrr&#39; was built under R version 3.6.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 2.2 Reading data The following lines will read in the data we will use for this exercise. Don’t worry about this right now beyond running it, we will talk more about it later. Pine &lt;- read_csv(&quot;PINE_Jan-Mar_2010.csv&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## StationID = col_character(), ## cfs = col_double(), ## surrogate = col_character(), ## datetime = col_datetime(format = &quot;&quot;), ## year = col_double(), ## quarter = col_double(), ## month = col_double(), ## day = col_double() ## ) SNP &lt;- read_csv(&quot;PINE_NFDR_Jan-Mar_2010.csv&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## StationID = col_character(), ## cfs = col_double(), ## surrogate = col_character(), ## datetime = col_datetime(format = &quot;&quot;), ## year = col_double(), ## quarter = col_double(), ## month = col_double(), ## day = col_double() ## ) RBI &lt;- read_csv(&quot;Flashy_Dat_Subset.csv&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## .default = col_double(), ## STANAME = col_character(), ## STATE = col_character(), ## CLASS = col_character(), ## AGGECOREGION = col_character() ## ) ## ℹ Use `spec()` for the full column specifications. Basic ggplot syntax 2.3 Our first ggplot Let’s look at the Pine data, plotting streamflow (the cfs column) by the date (datetime column). We will show the time series as a line. ggplot(data = Pine, aes(x = datetime, y = cfs))+ geom_line() 2.4 Change point type Now let’s make the same plot but show the data as points, using the pch parameter in geom_point() we can change the point type to any of the following: pch options from R help file ggplot(data = Pine, aes(x = datetime, y = cfs))+ geom_point(pch = 8) 2.5 Set colors We can also “easily” change the color. Easily is in quotes because this often trips people up. If you put color = “blue” in the aesthetic function, think about what that is telling ggplot. It says “control the color using”blue\"\". That doesn’t make a whole lot of sense, so neither does the output… Try it. What happens is that if color = “blue” is in the aesthetic, you are telling R that the color used in the geom represents “blue.” This is very useful if you have multiple geoms in your plot, are coloring them differently, and are building a legend. But if you are just trying to color the points, it kind of feels like R is trolling you… doesn’t it? Take the color = “blue” out of the aesthetic and you’re golden. ggplot(data = Pine, aes(datetime, y = cfs, color = &quot;blue&quot;))+ geom_point() ggplot(data = Pine, aes(x = datetime, y = cfs))+ geom_point(color = &quot;blue&quot;) 2.6 Controlling color with a third variable and other functions Let’s plot the data as a line again, but play with it a bit. First: make the line blue Second: change the theme Third: change the axis labels Fourth: color by discharge ggplot(data = Pine, aes(x = datetime, y = cfs, color = cfs))+ geom_line()+ ylab(&quot;Discharge (cfs)&quot;)+ xlab(element_blank())+ theme_classic() 2.7 Plotting multiple groups The SNP dataset has two different streams: Pine and NFDR We can look at the two of those a couple of different ways First, make two lines, colored by the stream by adding color = to your aesthetic. ggplot(data = SNP, aes(x = datetime,y = cfs, color = StationID)) + geom_line() 2.8 Facets We can also use facets. You must tell the facet_wrap what variable to use to make the separate panels (facet =). It’ll decide how to orient them or you can tell it how. We want them to be on top of each other so we are going to tell it we want 2 rows by setting nrow = 2. Note that we have to put the column used to make the facets in quotes after facets = ggplot(data = SNP, aes(x = datetime,y = cfs)) + geom_line() + facet_wrap(facets = &quot;StationID&quot;, nrow = 2) 2.9 Two variable faceting You can also use facet_grid() to break your plots up into panels based on two variables. Below we will create a panel for each month in each watershed. Adding scales = “free” allows facet_grid to change the axes. By default, all axes will be the same. This is often what we want, so we can more easily compare magnitudes, but sometimes we are looking for patterns more, so we may want to let the axes have whatever range works for the individual plots. ggplot(data = SNP, aes(x = datetime,y = cfs)) + geom_line() + facet_grid(StationID ~ month, scales = &quot;free&quot;) 2.10 Boxplots We can look at these data in other ways as well. A very useful way to look at the variation of two groups is to use a boxplot. Because the data span several orders of magnitude, we will have to log the y axis to see the differences between the two streams. We do that by adding scale_y_log10() ggplot(data = SNP, aes(x = StationID, y = cfs)) + stat_boxplot()+ scale_y_log10() 2.11 More about color, size, etc Let’s play around a bit with controlling color, point size, etc with other data. We can control the size of points by putting size = in the aes() and color by putting color = If you use a point type that has a background, like #21, you can also set the background color using bg = If points are too close together to see them all you can use a hollow point type or set the alpha lower so the points are transparent (alpha = ) ggplot(RBI, aes(RBI, DRAIN_SQKM, size = T_AVG_SITE, bg = STATE))+ geom_point(pch = 21, alpha = 0.3) 2.12 Multiple geoms Finally: You can add multiple geoms to the same plot. Examples of when you might want to do this are when you are showing a line fit and want to show the points as well, or maybe showing a boxplot and want to show the data behind it. You simply add additional geom_… lines to add additional geoms. ggplot(RBI, aes(RBI, DRAIN_SQKM, color = AGGECOREGION))+ stat_smooth(method = &quot;lm&quot;, linetype = 2)+ geom_point() ## `geom_smooth()` using formula &#39;y ~ x&#39; "],["Programming.html", "Chapter 3 R Tidyverse Programming Basics 3.1 Introduction 3.2 You can use R as a calculator 3.3 You can create new objects using &lt;- 3.4 Using functions 3.5 Read in some data. 3.6 Wait, hold up. What is a tibble? 3.7 Data wrangling in dplyr 3.8 Filter 3.9 Arrange 3.10 Select 3.11 Mutate 3.12 Summarize 3.13 Multiple operations with pipes 3.14 Save your results to a new tibble 3.15 What about NAs? 3.16 What are some things you think I’ll ask you to do for the activity next class?", " Chapter 3 R Tidyverse Programming Basics Get this document and a version with empty code chunks at the template repository on github: https://github.com/VT-Hydroinformatics/2-Programming-Basics 3.1 Introduction We have messed around with plotting a bit and you’ve seen a little of what R can do. So now let’s review or introduce you to some basics. Even if you have worked in R before, it is good to be remind of/practice with this stuff, so stay tuned in! This exercise covers most of the same principles as two chapters in R for Data Science Workflow: basics (https://r4ds.had.co.nz/workflow-basics.html) Data transformation (https://r4ds.had.co.nz/transform.html) 3.2 You can use R as a calculator If you just type numbers and operators in, R will spit out the results 1 + 2 ## [1] 3 3.3 You can create new objects using &lt;- Yea yea, = does the same thing. But use &lt;-. We will call &lt;- assignment or assignment operator. When we are coding in R we use &lt;- to assign values to objects and = to set values for parameters in functions. Using &lt;- helps us differentiate between the two. Norms for formatting are important because they help us understand what code is doing, especially when stuff gets complex. Oh, one more thing: Surround operators with spaces. Don’t code like a gorilla. x &lt;- 1 looks better than x&lt;-1 and if you disagree you are wrong. :) You can assign single numbers or entire chunks of data using &lt;- So if you had an object called my_data and wanted to copy it into my_new_data you could do: my_new_data &lt;- my_data You can then recall/print the values in an object by just typing the name by itself. In the code chunk below, assign a 3 to the object “y” and then print it out. y &lt;- 3 y ## [1] 3 If you want to assign multiple values, you have to put them in the function c() c means combine. R doesn’t know what to do if you just give it a bunch of values with space or commas, but if you put them as arguments in the combine function, it’ll make them into a vector. Any time you need to use several values, even passing as an argument to a function, you have to put them in c() or it won’t work. a &lt;- c(1,2,3,4) a ## [1] 1 2 3 4 When you are creating objects, try to give them meaningful names so you can remember what they are. You can’t have spaces or operators that mean something else as part of a name. And remember, everything is case sensitive. Assign the value 5.4 to water_pH and then try to recall it by typing “water_ph” water_pH &lt;- 5.4 #water_ph You can also set objects equal to strings, or values that have letters in them. To do this you just have to put the value in quotes, otherwise R will think it is an object name and tell you it doesn’t exist. Try: name &lt;- “JP” and then name &lt;- JP What happens if you forget the ending parenthesis? Try: name &lt;- \"JP R can be cryptic with it’s error messages or other responses, but once you get used to them, you know exactly what is wrong when they pop up. name &lt;- &quot;JP&quot; #name &lt;- JP 3.4 Using functions As an example, let’s try the seq() function, which creates a sequence of numbers. seq(from = 1, to = 10, by = 1) ## [1] 1 2 3 4 5 6 7 8 9 10 #or seq(1, 10, 1) ## [1] 1 2 3 4 5 6 7 8 9 10 #or seq(1, 10) ## [1] 1 2 3 4 5 6 7 8 9 10 #what does this do seq(10,1) ## [1] 10 9 8 7 6 5 4 3 2 1 3.5 Read in some data. For the following demonstration we will use the RBI data from a sample of USGS gages we used last class. First we will load the tidyverse library, everything we have done so far is in base R. Important: read_csv() is the tidyverse csv reading function, the base R function is read.csv(). read.csv() will not read your data in as a tibble, which is the format used by tidyverse functions. library(tidyverse) rbi &lt;- read_csv(&quot;Flashy_Dat_Subset.csv&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## .default = col_double(), ## STANAME = col_character(), ## STATE = col_character(), ## CLASS = col_character(), ## AGGECOREGION = col_character() ## ) ## ℹ Use `spec()` for the full column specifications. 3.6 Wait, hold up. What is a tibble? Good question. It’s a fancy way to store data that works well with tidyverse functions. Let’s look at the rbi tibble. head(rbi) ## # A tibble: 6 x 26 ## site_no RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1013500 0.0584 35 Fish Ri… 2253. 1 47.2 -68.6 ME Ref ## 2 1021480 0.208 300 Old Str… 76.7 1 44.9 -67.7 ME Ref ## 3 1022500 0.198 286 Narragu… 574. 1 44.6 -67.9 ME Ref ## 4 1029200 0.132 183 Seboeis… 445. 1 46.1 -68.6 ME Ref ## 5 1030500 0.114 147 Mattawa… 3676. 1 45.5 -68.3 ME Ref ## 6 1031300 0.297 489 Piscata… 304. 1 45.3 -69.6 ME Ref ## # … with 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;, ## # PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;, ## # T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;, ## # T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;, ## # PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt; Now read in the same data with read.csv() which will NOT read the data as a tibble. How is it different? Output each one in the Console. Knowing the data type for each column is super helpful for a few reasons…. let’s talk about them. Types: int, dbl, fctr, char, logical rbi_NT &lt;- read.csv(&quot;Flashy_Dat_Subset.csv&quot;) head(rbi_NT) ## site_no RBI RBIrank STANAME ## 1 1013500 0.05837454 35 Fish River near Fort Kent, Maine ## 2 1021480 0.20797008 300 Old Stream near Wesley, Maine ## 3 1022500 0.19805382 286 Narraguagus River at Cherryfield, Maine ## 4 1029200 0.13151299 183 Seboeis River near Shin Pond, Maine ## 5 1030500 0.11350485 147 Mattawamkeag River near Mattawamkeag, Maine ## 6 1031300 0.29718786 489 Piscataquis River at Blanchard, Maine ## DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS AGGECOREGION PPTAVG_BASIN ## 1 2252.7 1 47.23739 -68.58264 ME Ref NorthEast 97.42 ## 2 76.7 1 44.93694 -67.73611 ME Ref NorthEast 115.39 ## 3 573.6 1 44.60797 -67.93524 ME Ref NorthEast 120.07 ## 4 444.9 1 46.14306 -68.63361 ME Ref NorthEast 102.19 ## 5 3676.2 1 45.50097 -68.30596 ME Ref NorthEast 108.19 ## 6 304.4 1 45.26722 -69.58389 ME Ref NorthEast 119.83 ## PPTAVG_SITE T_AVG_BASIN T_AVG_SITE T_MAX_BASIN T_MAXSTD_BASIN T_MAX_SITE ## 1 93.53 3.00 3.0 9.67 0.202 10.0 ## 2 117.13 5.71 5.8 11.70 0.131 11.9 ## 3 129.56 5.95 6.3 11.90 0.344 12.2 ## 4 103.24 3.61 4.0 9.88 0.231 10.4 ## 5 113.13 4.82 5.4 10.75 0.554 11.7 ## 6 120.93 3.60 4.2 9.57 0.431 11.0 ## T_MIN_BASIN T_MINSTD_BASIN T_MIN_SITE PET SNOW_PCT_PRECIP PRECIP_SEAS_IND ## 1 -2.49 0.269 -2.7 504.7 36.9 0.102 ## 2 -0.85 0.123 -0.6 554.2 39.5 0.046 ## 3 0.06 0.873 1.4 553.1 38.2 0.047 ## 4 -2.13 0.216 -1.5 513.0 36.4 0.070 ## 5 -1.49 0.251 -1.2 540.8 37.2 0.033 ## 6 -2.46 0.268 -1.7 495.8 40.2 0.030 ## FLOWYRS_1990_2009 wy00_09 ## 1 20 10 ## 2 11 10 ## 3 20 10 ## 4 11 10 ## 5 20 10 ## 6 13 10 3.7 Data wrangling in dplyr If you forget syntax or what the following functions do, here is an excellent cheat sheet: https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf We will demo five functions below: filter() - returns rows that meet specified conditions arrange() - reorders rows select() - pull out variables (columns) mutate() - create new variables (columns) or reformat existing ones summarize() - collapse groups of values into summary stats With all of these, the first argument is the data and then the arguments after that specify what you want the function to do. 3.8 Filter Write an expression that returns data in rbi for the state of Maine (ME) Operators: == equal != not equal &gt;= , &lt;= greater than or equal to, less than or equal to &gt;, &lt; greater than or less then %in% included in a list of values &amp; and | or filter(rbi, STATE == &quot;ME&quot;) ## # A tibble: 13 x 26 ## site_no RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1013500 0.0584 35 Fish R… 2253. 1 47.2 -68.6 ME Ref ## 2 1021480 0.208 300 Old St… 76.7 1 44.9 -67.7 ME Ref ## 3 1022500 0.198 286 Narrag… 574. 1 44.6 -67.9 ME Ref ## 4 1029200 0.132 183 Seboei… 445. 1 46.1 -68.6 ME Ref ## 5 1030500 0.114 147 Mattaw… 3676. 1 45.5 -68.3 ME Ref ## 6 1031300 0.297 489 Piscat… 304. 1 45.3 -69.6 ME Ref ## 7 1031500 0.320 545 Piscat… 769 1 45.2 -69.3 ME Ref ## 8 1037380 0.318 537 Ducktr… 39 1 44.3 -69.1 ME Ref ## 9 1044550 0.242 360 Spence… 500. 1 45.3 -70.2 ME Ref ## 10 1047000 0.344 608 Carrab… 909. 1 44.9 -70.0 ME Ref ## 11 1054200 0.492 805 Wild R… 181 1 44.4 -71.0 ME Ref ## 12 1055000 0.450 762 Swift … 251. 1 44.6 -70.6 ME Ref ## 13 1057000 0.326 561 Little… 191. 1 44.3 -70.5 ME Ref ## # … with 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;, ## # PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;, ## # T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;, ## # T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;, ## # PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt; 3.8.1 Multiple conditions How many gages are there in Maine with an rbi greater than 0.25 filter(rbi, STATE == &quot;ME&quot; &amp; RBI &gt; 0.25) ## # A tibble: 7 x 26 ## site_no RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1031300 0.297 489 Piscataq… 304. 1 45.3 -69.6 ME Ref ## 2 1031500 0.320 545 Piscataq… 769 1 45.2 -69.3 ME Ref ## 3 1037380 0.318 537 Ducktrap… 39 1 44.3 -69.1 ME Ref ## 4 1047000 0.344 608 Carrabas… 909. 1 44.9 -70.0 ME Ref ## 5 1054200 0.492 805 Wild Riv… 181 1 44.4 -71.0 ME Ref ## 6 1055000 0.450 762 Swift Ri… 251. 1 44.6 -70.6 ME Ref ## 7 1057000 0.326 561 Little A… 191. 1 44.3 -70.5 ME Ref ## # … with 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;, ## # PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;, ## # T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;, ## # T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;, ## # PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt; 3.9 Arrange Arrange sorts by a column in your dataset. Sort the rbi data by the RBI column in ascending and then descending order arrange(rbi, RBI) ## # A tibble: 49 x 26 ## site_no RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1305500 0.0464 18 SWAN R… 21.3 2 40.8 -73.0 NY Non-… ## 2 1013500 0.0584 35 Fish R… 2253. 1 47.2 -68.6 ME Ref ## 3 1306460 0.0587 37 CONNET… 55.7 2 40.8 -73.2 NY Non-… ## 4 1030500 0.114 147 Mattaw… 3676. 1 45.5 -68.3 ME Ref ## 5 1029200 0.132 183 Seboei… 445. 1 46.1 -68.6 ME Ref ## 6 1117468 0.172 244 BEAVER… 25.3 1 41.5 -71.6 RI Ref ## 7 1022500 0.198 286 Narrag… 574. 1 44.6 -67.9 ME Ref ## 8 1021480 0.208 300 Old St… 76.7 1 44.9 -67.7 ME Ref ## 9 1162500 0.213 311 PRIEST… 49.7 1 42.7 -72.1 MA Ref ## 10 1117370 0.230 338 QUEEN … 50.5 1 41.5 -71.6 RI Ref ## # … with 39 more rows, and 16 more variables: AGGECOREGION &lt;chr&gt;, ## # PPTAVG_BASIN &lt;dbl&gt;, PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, ## # T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, ## # T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, ## # SNOW_PCT_PRECIP &lt;dbl&gt;, PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, ## # wy00_09 &lt;dbl&gt; arrange(rbi, desc(RBI)) ## # A tibble: 49 x 26 ## site_no RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1311500 0.856 1017 VALLEY … 18.1 2 40.7 -73.7 NY Non-… ## 2 1054200 0.492 805 Wild Ri… 181 1 44.4 -71.0 ME Ref ## 3 1187300 0.487 800 HUBBARD… 53.9 1 42.0 -72.9 MA Ref ## 4 1105600 0.484 797 OLD SWA… 12.7 1 42.2 -70.9 MA Non-… ## 5 1055000 0.450 762 Swift R… 251. 1 44.6 -70.6 ME Ref ## 6 1195100 0.430 744 INDIAN … 14.8 1 41.3 -72.5 CT Ref ## 7 1181000 0.420 732 WEST BR… 244. 1 42.2 -72.9 MA Ref ## 8 1350000 0.414 721 SCHOHAR… 612. 2 42.3 -74.4 NY Ref ## 9 1121000 0.404 710 MOUNT H… 70.3 1 41.8 -72.2 CT Ref ## 10 1169000 0.395 688 NORTH R… 231. 1 42.6 -72.7 MA Ref ## # … with 39 more rows, and 16 more variables: AGGECOREGION &lt;chr&gt;, ## # PPTAVG_BASIN &lt;dbl&gt;, PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, ## # T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, ## # T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, ## # SNOW_PCT_PRECIP &lt;dbl&gt;, PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, ## # wy00_09 &lt;dbl&gt; 3.10 Select There are too many columns! You will often want to do this when you are manipulating the structure of your data and need to trim it down to only include what you will use. Select Site name, state, and RBI from the rbi data Note they come back in the order you put them in in the function, not the order they were in in the original data. You can do a lot more with select, especially when you need to select a bunch of columns but don’t want to type them all out. But we don’t need to cover all that today. For a taste though, if you want to select a group of columns you can specify the first and last with a colon in between (first:last) and it’ll return all of them. Select the rbi columns from site_no to DRAIN_SQKM. select(rbi, STANAME, STATE, RBI) ## # A tibble: 49 x 3 ## STANAME STATE RBI ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Fish River near Fort Kent, Maine ME 0.0584 ## 2 Old Stream near Wesley, Maine ME 0.208 ## 3 Narraguagus River at Cherryfield, Maine ME 0.198 ## 4 Seboeis River near Shin Pond, Maine ME 0.132 ## 5 Mattawamkeag River near Mattawamkeag, Maine ME 0.114 ## 6 Piscataquis River at Blanchard, Maine ME 0.297 ## 7 Piscataquis River near Dover-Foxcroft, Maine ME 0.320 ## 8 Ducktrap River near Lincolnville, Maine ME 0.318 ## 9 Spencer Stream near Grand Falls, Maine ME 0.242 ## 10 Carrabassett River near North Anson, Maine ME 0.344 ## # … with 39 more rows select(rbi, site_no:DRAIN_SQKM) ## # A tibble: 49 x 5 ## site_no RBI RBIrank STANAME DRAIN_SQKM ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1013500 0.0584 35 Fish River near Fort Kent, Maine 2253. ## 2 1021480 0.208 300 Old Stream near Wesley, Maine 76.7 ## 3 1022500 0.198 286 Narraguagus River at Cherryfield, Maine 574. ## 4 1029200 0.132 183 Seboeis River near Shin Pond, Maine 445. ## 5 1030500 0.114 147 Mattawamkeag River near Mattawamkeag, Maine 3676. ## 6 1031300 0.297 489 Piscataquis River at Blanchard, Maine 304. ## 7 1031500 0.320 545 Piscataquis River near Dover-Foxcroft, Mai… 769 ## 8 1037380 0.318 537 Ducktrap River near Lincolnville, Maine 39 ## 9 1044550 0.242 360 Spencer Stream near Grand Falls, Maine 500. ## 10 1047000 0.344 608 Carrabassett River near North Anson, Maine 909. ## # … with 39 more rows 3.11 Mutate Use mutate to add new columns based on additional ones. Common uses are to create a column of data in different units, or to calculate something based on two columns. You can also use it to just update a column, by naming the new column the same as the original one (but be careful because you’ll lose the original one!). I commonly use this when I am changing the datatype of a column, say from a character to a factor or a string to a date. Create a new column in rbi called T_RANGE by subtracting T_MIN_SITE from T_MAX_SITE mutate(rbi, T_RANGE = T_MAX_SITE - T_MIN_SITE) ## # A tibble: 49 x 27 ## site_no RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1013500 0.0584 35 Fish R… 2253. 1 47.2 -68.6 ME Ref ## 2 1021480 0.208 300 Old St… 76.7 1 44.9 -67.7 ME Ref ## 3 1022500 0.198 286 Narrag… 574. 1 44.6 -67.9 ME Ref ## 4 1029200 0.132 183 Seboei… 445. 1 46.1 -68.6 ME Ref ## 5 1030500 0.114 147 Mattaw… 3676. 1 45.5 -68.3 ME Ref ## 6 1031300 0.297 489 Piscat… 304. 1 45.3 -69.6 ME Ref ## 7 1031500 0.320 545 Piscat… 769 1 45.2 -69.3 ME Ref ## 8 1037380 0.318 537 Ducktr… 39 1 44.3 -69.1 ME Ref ## 9 1044550 0.242 360 Spence… 500. 1 45.3 -70.2 ME Ref ## 10 1047000 0.344 608 Carrab… 909. 1 44.9 -70.0 ME Ref ## # … with 39 more rows, and 17 more variables: AGGECOREGION &lt;chr&gt;, ## # PPTAVG_BASIN &lt;dbl&gt;, PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, ## # T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, ## # T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, ## # SNOW_PCT_PRECIP &lt;dbl&gt;, PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, ## # wy00_09 &lt;dbl&gt;, T_RANGE &lt;dbl&gt; When downloading data from the USGS through R, you have to enter the gage ID as a character, even though they are all made up of numbers. So to practice doing this, update the site_no column to be a character datatype mutate(rbi, site_no = as.character(site_no)) ## # A tibble: 49 x 26 ## site_no RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1013500 0.0584 35 Fish R… 2253. 1 47.2 -68.6 ME Ref ## 2 1021480 0.208 300 Old St… 76.7 1 44.9 -67.7 ME Ref ## 3 1022500 0.198 286 Narrag… 574. 1 44.6 -67.9 ME Ref ## 4 1029200 0.132 183 Seboei… 445. 1 46.1 -68.6 ME Ref ## 5 1030500 0.114 147 Mattaw… 3676. 1 45.5 -68.3 ME Ref ## 6 1031300 0.297 489 Piscat… 304. 1 45.3 -69.6 ME Ref ## 7 1031500 0.320 545 Piscat… 769 1 45.2 -69.3 ME Ref ## 8 1037380 0.318 537 Ducktr… 39 1 44.3 -69.1 ME Ref ## 9 1044550 0.242 360 Spence… 500. 1 45.3 -70.2 ME Ref ## 10 1047000 0.344 608 Carrab… 909. 1 44.9 -70.0 ME Ref ## # … with 39 more rows, and 16 more variables: AGGECOREGION &lt;chr&gt;, ## # PPTAVG_BASIN &lt;dbl&gt;, PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, ## # T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, ## # T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, ## # SNOW_PCT_PRECIP &lt;dbl&gt;, PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, ## # wy00_09 &lt;dbl&gt; 3.12 Summarize Summarize will perform an operation on all of your data, or groups if you assign groups. Use summarize to compute the mean, min, and max rbi summarize(rbi, meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI)) ## # A tibble: 1 x 3 ## meanrbi maxrbi minrbi ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.316 0.856 0.0464 Now use the group function to group by state and then summarize in the same way as above rbistate &lt;- group_by(rbi, STATE) summarize(rbistate, meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI)) ## # A tibble: 7 x 4 ## STATE meanrbi maxrbi minrbi ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 CT 0.366 0.430 0.295 ## 2 MA 0.367 0.487 0.213 ## 3 ME 0.269 0.492 0.0584 ## 4 NH 0.336 0.368 0.265 ## 5 NY 0.342 0.856 0.0464 ## 6 RI 0.201 0.230 0.172 ## 7 VT 0.299 0.365 0.231 3.13 Multiple operations with pipes The pipe operator %&gt;% allows you to perform multiple operations in a sequence without saving intermediate steps. Not only is this more efficient, but structuring operations with pipes is also more intuitive than nesting functions within functions (the other way you can do multiple operations). 3.13.1 Let’s say we want to tell R to make a PB&amp;J sandwich by using the pbbread(), jbread(), and joinslices() functions and the data “ingredients.” If we do this saving each step if would look like this: sando &lt;- pbbread(ingredients) sando &lt;- jbread(sando) sando &lt;- joinslices(sando) 3.13.2 If we nest the functions together we get this joinslice(jbread(pbbread(ingredients))) Efficient… but tough to read/interpret 3.13.3 Using the pipe it would look like this ingredients %&gt;% pbbread() %&gt;% jbread() %&gt;% joinslices() Much easier to follow! 3.13.4 When you use the pipe, it basically takes whatever came out of the first function and puts it into the data argument for the next one so rbi %&gt;% group_by(STATE) is the same as group_by(rbi, STATE) Take the groupby and summarize code from above and perform the operation using the pipe rbi %&gt;% group_by(STATE) %&gt;% summarize(meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI)) ## # A tibble: 7 x 4 ## STATE meanrbi maxrbi minrbi ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 CT 0.366 0.430 0.295 ## 2 MA 0.367 0.487 0.213 ## 3 ME 0.269 0.492 0.0584 ## 4 NH 0.336 0.368 0.265 ## 5 NY 0.342 0.856 0.0464 ## 6 RI 0.201 0.230 0.172 ## 7 VT 0.299 0.365 0.231 3.14 Save your results to a new tibble We have just been writing everything to the screen so we can see what we are doing… In order to save anything we do with these functions to work with it later, we just have to use the assignment operator (&lt;-) to store the data. One kind of awesome thing about the assignment operator is that it works both ways… x &lt;- 3 and 3 -&gt; x do the same thing (WHAT?!) So you can do the assignment at the beginning of the end of your dplyr workings, whatever you like best. Use the assignment operator to save the summary table you just made. stateRBIs &lt;- rbi %&gt;% group_by(STATE) %&gt;% summarize(meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI)) # Notice when you do this it doesn&#39;t output the result... # You can see what you did by clickon in stateRBIs in your environment panel # or just type stateRBIs stateRBIs ## # A tibble: 7 x 4 ## STATE meanrbi maxrbi minrbi ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 CT 0.366 0.430 0.295 ## 2 MA 0.367 0.487 0.213 ## 3 ME 0.269 0.492 0.0584 ## 4 NH 0.336 0.368 0.265 ## 5 NY 0.342 0.856 0.0464 ## 6 RI 0.201 0.230 0.172 ## 7 VT 0.299 0.365 0.231 3.15 What about NAs? We will talk more about this when we discuss stats, but some operations will fail if there are NA’s in the data. If appropriate, you can tell functions like mean() to ignore NAs. You can also use drop_na() if you’re working with a tibble. But be aware if you use that and save the result, drop_na() gets rid of the whole row, not just the NA. Because what would you replace it with…. an NA? x &lt;- c(1,2,3,4,NA) mean(x, na.rm = TRUE) ## [1] 2.5 3.16 What are some things you think I’ll ask you to do for the activity next class? "],["introactivity.html", "Chapter 4 ACTIVITY Intro Skills 4.1 Problem 1 4.2 Problem 2 4.3 Problem 3 4.4 Problem 4 4.5 Problem 5 4.6 Problem 6", " Chapter 4 ACTIVITY Intro Skills Get this document at the template repository on github: https://github.com/VT-Hydroinformatics/3-Activity-Intro-Skills 4.1 Problem 1 Load the tidyverse and lubridate libraries. Read in the PINE_NFDR_Jan-Mar_2010 csv using read_csv() Make a plot with the date on the x axis, discharge on the y axis. Show the discharge of the two watersheds as a line, coloring by watershed (StationID) 4.2 Problem 2 Make a boxplot to compare the discharge of Pine to NFDR for February 2010. Hint: use the pipe operator and the filter() function. Hint2: when you filter dates, you have to let R know you’re giving it a date. You can do this by using the mdy() function from lubridate. 4.3 Problem 3 Read in the Flashy Dat Subset file. For only sites in ME, NH, and VT: Plot PET (Potential Evapotranspiration) on the X axis and RBI (flashiness index) on the Y axis. Color the points based on what state they are in. Use the classic ggplot theme. 4.4 Problem 4 We want to look at the amount of snow for each site in the flashy dataset. Problem is, we are only given the average amount of total precip (PPTAVG_BASIN) and the percentage of snow (SNOW_PCT_PRECIP). Create a new column in the dataset called SNOW_AVG_BASIN and make it equal to the average total precip times the percentage of snow (careful with the percentage number). Make a barplot showing the amount of snow for each site in Maine. Put station name on the x axis and snow amount on the y. You have to add something to geom_bar() to use it for a 2 variable plot… check out the ggplot cheatsheet or do a quick internet search. The x axis of the resulting plot looks terrible! Can you figure out how to rotate the X axis labels so we can read them? 4.5 Problem 5 Create a new tibble that contains the min, max, and mean PET for each state. Sort the tibble by mean PET from high to low. Give your columns meaningful names within the summarize function or using rename(). Be sure your code outputs the tibble. 4.6 Problem 6 Take the tibble from problem 5. Create a new column that is the Range of the PET (max PET - min PET). Then get rid of the max PET and min PET columns so the tibble just has columns for State, mean PET, and PET range. Be sure your code outputs the tibble. "],["stats.html", "Chapter 5 Introduction to Basic Statistics 5.1 Reading for this section: Statistical Methods in Water Resources: Chapter 1 5.2 Questions for today: 5.3 What is the difference between a sample and a population. 5.4 Measuring our sample distribution: central tendency. 5.5 Measures of variability 5.6 What is a normal distribution and how can we determine if we have one?", " Chapter 5 Introduction to Basic Statistics Get this document and a version with empty code chunks at the template repository on github: https://github.com/VT-Hydroinformatics/4-Intro-Stats library(tidyverse) library(patchwork) ## Warning: package &#39;patchwork&#39; was built under R version 3.6.2 theme_set(theme_classic()) 5.1 Reading for this section: Statistical Methods in Water Resources: Chapter 1 https://pubs.usgs.gov/tm/04/a03/tm4a3.pdf 5.2 Questions for today: What is the difference between a sample and a population? How do we look at the distribution of data in a sample How do we measure aspects of a distribution What is a normal distribution? First let’s generate some synthetic data and talk about how to visualize it. #generate a normal distribution ExNorm &lt;- rnorm(1000, mean = 5) %&gt;% as_tibble() #look at distributions #histogram ExNorm %&gt;% ggplot(aes(value)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #pdf ExNorm %&gt;% ggplot(aes(value)) + stat_density() #Let&#39;s generate a plot that makes comparing these two easier 5.2.1 Stack plots to compare histogram and pdf We will save each plot as ggplot object and then output them using the patchwork package (loaded in the setup chunk). What is the difference between a histogram and a pdf? What features of the histogram are preserved? Which are lost? #histogram exhist &lt;- ExNorm %&gt;% ggplot(aes(value)) + geom_histogram() #pdf expdf &lt;- ExNorm %&gt;% ggplot(aes(value)) + stat_density() #put the plots side by side with + or on top of each other with / exhist/expdf ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 5.3 What is the difference between a sample and a population. Simply put: a population is the thing you are trying to measure. A sample is the data you measure in an effort to measure the population. A sample is a subset of a population. Let’s write some code for an example: We will create a POPULATION that is a large set of numbers. Think of this is as the concentration of Calcium in every bit of water in a lake. Then we will create a SAMPLE by randomly grabbing values from the POPULATION. This simulates us going around in a boat and taking grab samples in an effort to figure out the concentration of calcium in the lake. We can then run this code a bunch of times, you’ll get a different sample each time. You can also take a smaller or larger number of samples by changing “size” in the sample() function. How does your sample distribution look similar or different from the population? Why does the sample change every time you run it? What happens as you increase or decrease the number of samples? What happens if you set the number of samples to the size of the population? all_the_water &lt;- rnorm(10000, mean = 6) %&gt;% as_tibble() sample_of_water &lt;- sample(all_the_water$value, size = 100, replace = FALSE) %&gt;% as_tibble() population_hist &lt;- all_the_water %&gt;% ggplot(aes(value))+ geom_histogram()+ ggtitle(&quot;Population: All the water in the lake&quot;) sample_hist &lt;- sample_of_water %&gt;% ggplot(aes(value))+ geom_histogram()+ ggtitle(&quot;Your sample of the lake&quot;) population_hist + sample_hist ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 5.4 Measuring our sample distribution: central tendency. When we take a sample of a population, there are a few things we will want to measure about the distribution of values: where is the middle, how variable is it, and is it skewed to one side or another? The first of these, “where is the middle?” is addressed with measures of central tendency. We will discuss three possible ways to measure this. The mean, median, and weighted mean. To explain the importance of choosing between the mean and median, we will first import some discharge data. Read in the PINE discharge data. pineQ &lt;- read_csv(&quot;PINE_Jan-Mar_2010.csv&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## StationID = col_character(), ## cfs = col_double(), ## surrogate = col_character(), ## datetime = col_datetime(format = &quot;&quot;), ## year = col_double(), ## quarter = col_double(), ## month = col_double(), ## day = col_double() ## ) To find the mean (average), you just sum up all the values in your sample and divide by the number of values. To find the median, you put the values IN ORDER, and choose the middle value. The middle value is the one where there are the same number of values higher than that value as there are values lower than it. Because it uses the order of the values rather than just the values themselves, the median is resistant to skewed distributions. This means it is less effected by very large or very small values compared to most values in the sample data. Let’s look at our normal distribution from earlier (ExNorm) compared to the Pine watershed discharge (pineQ) Note that distributions like pineQ, that are positively skewed, are very common in environmental data. #Calculate mean and median for cfs in pineQ and values in ExNorm pineMean &lt;- mean(pineQ$cfs) pineMedian &lt;- median(pineQ$cfs) xmean &lt;- mean(ExNorm$value) xmedian &lt;- median(ExNorm$value) #plot mean and median on the ExNorm distribution Ex &lt;- ExNorm %&gt;% ggplot(aes(value)) + geom_histogram()+ geom_vline(xintercept = xmean, color = &quot;red&quot;)+ geom_vline(xintercept = xmedian, color = &quot;blue&quot;) #plot mean and median on the pineQ discharge histogram PineP &lt;- pineQ %&gt;% ggplot(aes(cfs)) + geom_histogram()+ geom_vline(xintercept = pineMean, color = &quot;red&quot;)+ geom_vline(xintercept = pineMedian, color = &quot;blue&quot;) Ex / PineP ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 5.4.1 So what’s a weighted average? When you compute a standard mean or median, you are giving equal weight to each measurement. Adding up all the values in a sample and dividing by the number of samples is the same as multiplying each value by 1/# of samples. For instance if you had ten samples, to calculate the mean you would add them up and divide by 10. This is the same as multiplying each value by 1/10 and then adding them up. Each value is equally weighted at 1/10. There are certain situations in which this is not the ideal way to calculate an average. A common one in hydrology is that you have samples that are supposed to represent different portions of an area. One sample may be taken to measure a forest type that takes up 100 ha of a watershed while another sample represents a forest type that only takes up 4 ha. You may not want to simply average those values! Another example is precipitation gages. In the image below, you see there are 5 rain gages. To get a precipitation number for the watershed, we could just average them, or we could assume they represent an area of the watershed and then weight their values by the area they represent. One method of designating the areas is by using Theissen polygons (the middle watershed). Another method of weighting is isohyetal contours, but we won’t worry about that for now! In the weighted situation, we find the average by multiplying each precipitation values by the proportion of the watershed it represents, shown by the Thiessen polygons, and then add them all together. Let’s do an example. source: https://edx.hydrolearn.org/assets/courseware/v1/e5dc65098f1e8c5faacae0e171e28ccf/asset-v1:HydroLearn+HydroLearn401+2019_S2+type@asset+block/l2_image004.png The precip values for the watershed above are 4.5, 5.5, 5.8, 4.7, and 3.0 We will assume the proportions of the watershed that each gauge represents are 0.20, 0.15, 0.40, 0.15, 0.10, respectively (or 20%, 15%, 40%, 15%, 10%) Write some code to compute the regular mean precip from the values, and then the weighted mean. precip &lt;- c(4.5, 5.5, 5.8, 4.7, 3.0) weights &lt;- c(0.2, 0.15, 0.4, 0.15, 0.1) mean(precip) ## [1] 4.7 sum(precip * weights) ## [1] 5.05 5.5 Measures of variability Measures of variability allow us to measure the width of our sample data histogram or pdf. If all the values in our sample are close together, we would have small measures of variability, and a pointy pdf/histogram. If they vary more, we would have larger measures of variability and a broad pdf/histogram. We will explore four measures of variability: 5.5.0.1 Variance: Sum of the squared difference of each value from the mean divided by the number of samples minus 1. var() (https://pubs.usgs.gov/tm/04/a03/tm4a3.pdf) source: https://pubs.usgs.gov/tm/04/a03/tm4a3.pdf 5.5.0.2 Standard deviation: The square root of the variance sd() **Both variance and standard deviation are sensitive to outliers. 5.5.0.3 CV: Coefficient of Variation CV is simply the standard deviation divided by the mean of the data. Because you divide by the mean, CV is dimensionless. This allows you to use it to compare the variation in samples with very different magnitudes. 5.5.0.4 IQR: Interquartile Range IQR is resistant to outliers because it works like a median. It measures the range of the middle 50% of the data in your distribution. So the IQR is the difference between the value between the 75th and 25th percentiles of your data, where the 75th percentile means 75% of the data is BELOW that value and the 25th percentile means 25% is below that value. Using the same vocabulary, the median is the same as the 50th percentile of the data. If you ask R for the QUANTILES of your sample data, it will give you the values at which 0%, 25%, 50%, 75%, and 100% of the data are below. These are the 1,2,3,4, and 5th quantiles. Therefore, the IQR is the difference between the 4th and 2nd quantile. Okay, code time. First, let’s explore how changing the variability of a distribution changes the shape of it’s distribution. Create a plot a random normal distribution using rnorm() and set sd to different numbers. Make the mean of the distribution 0, the sample size 300, and the standard deviation 1 to start. Then increase the standard deviation incrementally to 10 and see what happens. Make the limits of the x axis on the plot -30 to 30. rnorm(300, mean = 0, sd = 1) %&gt;% as_tibble %&gt;% ggplot(aes(value))+ stat_density()+ xlim(c(-30,30)) Now let’s calculate the standard deviation, variance, coefficient of variation, and IQR of the Pine discharge data. #standard deviation sd(pineQ$cfs) ## [1] 84.47625 #variance var(pineQ$cfs) ## [1] 7136.237 #coefficient of variation sd(pineQ$cfs)/mean(pineQ$cfs) ## [1] 2.800221 #IQR using the IQR funciton IQR(pineQ$cfs) ## [1] 8.1325 #IQR using the quantile function quants &lt;- quantile(pineQ$cfs) quants[4] - quants[2] ## 75% ## 8.1325 5.5.0.5 What about how lopsided the distribution is? There are several ways to measure this as well, but we are just going to look at one: The Quartile skew. The quartile skew is the difference between the upper quartiles (50th-75th) and the lower quartiles (25th-50th) divided by the IQR (75th-25th). source: https://pubs.usgs.gov/tm/04/a03/tm4a3.pdf Let’s look at the quartile skew of the two distributions we’ve been measuring. Calculate it for the pineQ discharge data and the random normal distribution we generated. Which one is more skewed? quantsP &lt;- quantile(pineQ$cfs) ((quantsP[3]-quantsP[2]) - (quantsP[2] - quantsP[1])) / quantsP[3] - quantsP[1] ## 50% ## -4.837233 quantsX &lt;- quantile(ExNorm$value) ((quantsX[3]-quantsX[2]) - (quantsX[2] - quantsX[1])) / quantsX[3] - quantsX[1] ## 50% ## -2.145398 5.6 What is a normal distribution and how can we determine if we have one? The distribution we generated with rnorm() is a normal distribution. The distribution of pineQ discharge is not normal. Now that we’ve looked at different ways to characterize distributions, we have the vocabulary to describe why. Normal distributions: mean = median, half values to the right, half to the left symmetric (not skewed) single peak Many statistical tests require that the distribution of the data you put into them is normally distributed. BE CAREFUL! There are also tests that use ranked data. Similar to how the median is resistant to outliers, these rank-based tests are resistant to non-normal data. Two popular ones are Kruskal-Wallis and Wilcoxon rank-sum. But how far off can you be before you don’t consider a distribution normal? Seems like a judgement call! R to the rescue! There is a built in test for normality called shapiro.test(), which performs the Shapiro-Wilk test of normality. The hypothesis this test tests is “The distribution is normal.” So if this function returns a p-value less than 0.05, you reject that hypothesis and your function is NOT normal. You can also make a quantile-quantile plot. A straight line on this plot indicates a normal distribution, a non-straight line indicates it is not normal. shapiro.test(pineQ$cfs) ## ## Shapiro-Wilk normality test ## ## data: pineQ$cfs ## W = 0.27155, p-value &lt; 2.2e-16 qqnorm(pineQ$cfs) "],["statsactivity.html", "Chapter 6 ACTIVITY Intro Stats 6.1 Problem 1 6.2 Problem 2 6.3 Problem 3 6.4 Problem 4 6.5 Problem 5 6.6 Problem 6", " Chapter 6 ACTIVITY Intro Stats Get this document at the template repository on github: https://github.com/VT-Hydroinformatics/5-Intro-Stats-Activity Address each of the questions in the code chunk below and/or by typing outside the chunk (for written answers). 6.1 Problem 1 Load the tidyverse and patchwork libraries and read in the Flashy and Pine datasets. 6.2 Problem 2 Using the flashy dataset, make a pdf of the average basin rainfall (PPTAVG_BASIN) for the NorthEast AGGECOREGION. On that pdf, add vertical lines showing the mean, median, standard deviation, and IQR. Make each a different color and note which is which in a typed answer below this question. (or if you want an extra challenged, make a custom legend that shows this) 6.3 Problem 3 Perform a Shapiro-Wilk test for normality on the data from question 2. Using the results from that test and the plot and stats from question 2, discuss whether or not the distribution is normal. 6.4 Problem 4 Make a plot that shows the distribution of the data from the PINE watershed and the NFDR watershed (two pdfs on the same plot). Log the x axis. 6.5 Problem 5 You want to compare how variable the discharge is in each of the watersheds in question 4. Which measure of spread would you use and why? If you wanted to measure the central tendency which measure would you use and why? 6.6 Problem 6 Compute 3 measures of spread and 2 measures of central tendency for the PINE and NFDR watershed. (hint: use group_by() and summarize()) Be sure your code outputs the result. Which watershed has higher flow? Which one has more variable flow? How do you know? "],["getdata.html", "Chapter 7 Joins, Pivots, and USGS dataRetrieval 7.1 Goals for today 7.2 Exploring what dataRetrieval can do. 7.3 Joins 7.4 Join example 7.5 Finding IDs to download USGS data 7.6 OK let’s download some data! 7.7 Pivoting: wide and long data 7.8 Pivot Examples", " Chapter 7 Joins, Pivots, and USGS dataRetrieval Get this document and a version with empty code chunks at the template repository on github: https://github.com/VT-Hydroinformatics/6-Get-Format-Plot-HydroData Readings: Introduction to the dataRetrieval package https://cran.r-project.org/web/packages/dataRetrieval/vignettes/dataRetrieval.html Chapter 12 &amp; 13 of R for Data Science https://r4ds.had.co.nz/tidy-data.html 7.1 Goals for today Get familiar with the dataRetrieval package Intro to joins Learn about long vs. wide data and how to change between them Prep question: How would you get data from the USGS (non-R)? Install the dataRetrieval package. Load it and the tidyverse. #install.packages(&quot;dataRetrieval&quot;) library(dataRetrieval) library(tidyverse) library(lubridate) ## Warning: package &#39;lubridate&#39; was built under R version 3.6.2 7.2 Exploring what dataRetrieval can do. Think about the dataRetrieval as a way to interact with same public data you can access through waterdata.usgs.gov but without having to click on buttons and search around. It makes getting data or doing analyses with USGS data much more reproducible and fast! To explore a few of the capabilities (NOT ALL!!) we will start with the USGS gage on the New River at Radford. The gage number is 03171000. The documentation for the package is extremely helpful: https://cran.r-project.org/web/packages/dataRetrieval/vignettes/dataRetrieval.html I always have to look up how to do things because the package is very specialized! This is the case with most website APIs, in my experience. It’s a good argument for getting good at navigating package documentation! Basically you just look through and try to piece together the recipe for what you want to do using the examples they give in the document. First, let’s get information about the site using the readNWISsite() and whatNWISdata() functions. Try each out and see what they tell you. Remember, all the parameter codes and site names get passed to dataRetrieval functions as characters, ao they must be in quotes. #important: note the site number gets input as a character site &lt;- &quot;03171000&quot; #Information about the site siteinfo &lt;- readNWISsite(site) #What data is available for the site? #Daily values, mean values dataAvailable &lt;- whatNWISdata(siteNumber = site, service = &quot;dv&quot;, statCd = &quot;00003&quot;) dataAvailable ## agency_cd site_no station_nm site_tp_cd dec_lat_va dec_long_va ## 2 USGS 03171000 NEW RIVER AT RADFORD, VA ST 37.14179 -80.56922 ## 3 USGS 03171000 NEW RIVER AT RADFORD, VA ST 37.14179 -80.56922 ## 4 USGS 03171000 NEW RIVER AT RADFORD, VA ST 37.14179 -80.56922 ## coord_acy_cd dec_coord_datum_cd alt_va alt_acy_va alt_datum_cd huc_cd ## 2 U NAD83 1711.99 0.13 NAVD88 05050001 ## 3 U NAD83 1711.99 0.13 NAVD88 05050001 ## 4 U NAD83 1711.99 0.13 NAVD88 05050001 ## data_type_cd parm_cd stat_cd ts_id loc_web_ds medium_grp_cd parm_grp_cd ## 2 dv 00010 00003 241564 NA wat &lt;NA&gt; ## 3 dv 00060 00003 145684 NA wat &lt;NA&gt; ## 4 dv 00095 00003 145685 NA wat &lt;NA&gt; ## srs_id access_cd begin_date end_date count_nu ## 2 1645597 0 2006-12-20 2009-03-18 704 ## 3 1645423 0 1907-10-01 2021-03-10 32668 ## 4 1646694 0 2006-12-20 2008-09-29 534 7.3 Joins When we look at what whatNWISdata returns, we see it gives us parameter codes, but doesn’t tell us what they mean. This is a common attribute of databases: you use a common identifier but then have the full information in a lookup file. In this case, the look-up information telling us what the parameter codes mean is in “parameterCdFile” which loads with the dataRetrieval package. So, you could look at that and see what the parameters mean. OR We could have R do it and add a column that tells us what the parameters mean. Enter JOINS! Joins allow us to combine the data from two different data sets that have a column in common. At its most basic, a join looks for a matching row with the same key in both datasets (for example, a USGS gage number) and then combines the rows. So now you have all the data from both sets, matched on the key. But you have to make some decisions: what if a key value exists in one set but not the other? Do you just drop that observation? Do you add an NA? Let’s look at the different options. Take for example the two data sets, FlowTable and SizeTable. The SiteName values are the key values and the MeanFlow and WSsize values are the data. Join Setup Note River1 and River2 match up, but River3 and River5 only exist in one data set or the other. The first way to deal with this is an INNER JOIN: inner_join() In an inner join, you only keep records that match. So the rows for River3 and River5 will be dropped because there is no corresponding data in the other set. See below: Inner Join But what if you don’t want to lose the values in one or the other or both?! For instance, let’s say you have a bunch of discharge data for a stream, and then chemistry grab samples. You want to join the chemistry to the discharge based on the dates and times they were taken. But when you do this, you don’t want to delete all the discharge data where there is no chemistry! We need another option. Enter OUTER JOINS LEFT JOIN, left_join(): Preserves all values from the LEFT data set, and pastes on the matching ones from the right. This creates NAs where there is a value on the left but not the right. (this is what you’d want to do in the discharge - chemistry example above) Left Join RIGHT JOIN, right_join(): Preserves all values from the RIGHT data set, and pastes on the matching ones from the left. This creates NAs where there is a value on the right but not the left. Right Join FULL JOIN, full_join(): KEEP EVERYTHING! The hoarder of the joins. No matching record on the left? create an NA on the right! No matching value on the right? Create an NA on the left! NAs for everyone! Full Join When you do this in R, you use the functions identified in the descriptions with the following syntax (see example below): if the column is named the same in both data sets &gt; xxx_join(left_tibble, right_tibble, by = “key_column”)** if the column is named differently in both data sets &gt; xxx_join(left_tibble, right_tibble, by = c(“left_key” = “right_key”) Left Join Differing Col Names Note in both of the above, when you specify which column to use as “by” you have to put it in quotes. 7.4 Join example So in the chunk below let’s get add information about the parameters in dataAvailable by joining it with the key file: parameterCdFile. The column with the parameter codes is called parm_cd in dataAvailable and parameter_cd in parameterCdFile dataAvailable &lt;- left_join(dataAvailable, parameterCdFile, by = c(&quot;parm_cd&quot; = &quot;parameter_cd&quot;)) dataAvailable ## agency_cd site_no station_nm site_tp_cd dec_lat_va dec_long_va ## 1 USGS 03171000 NEW RIVER AT RADFORD, VA ST 37.14179 -80.56922 ## 2 USGS 03171000 NEW RIVER AT RADFORD, VA ST 37.14179 -80.56922 ## 3 USGS 03171000 NEW RIVER AT RADFORD, VA ST 37.14179 -80.56922 ## coord_acy_cd dec_coord_datum_cd alt_va alt_acy_va alt_datum_cd huc_cd ## 1 U NAD83 1711.99 0.13 NAVD88 05050001 ## 2 U NAD83 1711.99 0.13 NAVD88 05050001 ## 3 U NAD83 1711.99 0.13 NAVD88 05050001 ## data_type_cd parm_cd stat_cd ts_id loc_web_ds medium_grp_cd parm_grp_cd ## 1 dv 00010 00003 241564 NA wat &lt;NA&gt; ## 2 dv 00060 00003 145684 NA wat &lt;NA&gt; ## 3 dv 00095 00003 145685 NA wat &lt;NA&gt; ## srs_id access_cd begin_date end_date count_nu parameter_group_nm ## 1 1645597 0 2006-12-20 2009-03-18 704 Physical ## 2 1645423 0 1907-10-01 2021-03-10 32668 Physical ## 3 1646694 0 2006-12-20 2008-09-29 534 Physical ## parameter_nm ## 1 Temperature, water, degrees Celsius ## 2 Discharge, cubic feet per second ## 3 Specific conductance, water, unfiltered, microsiemens per centimeter at 25 degrees Celsius ## casrn srsname parameter_units ## 1 &lt;NA&gt; Temperature, water deg C ## 2 &lt;NA&gt; Stream flow, mean. daily ft3/s ## 3 &lt;NA&gt; Specific conductance uS/cm @25C #that made a lot of columns, let&#39;s clean it up dataAvailClean &lt;- dataAvailable %&gt;% select(site_no, station_nm, parm_cd, srsname, parameter_units, begin_date, end_date) dataAvailClean ## site_no station_nm parm_cd srsname ## 1 03171000 NEW RIVER AT RADFORD, VA 00010 Temperature, water ## 2 03171000 NEW RIVER AT RADFORD, VA 00060 Stream flow, mean. daily ## 3 03171000 NEW RIVER AT RADFORD, VA 00095 Specific conductance ## parameter_units begin_date end_date ## 1 deg C 2006-12-20 2009-03-18 ## 2 ft3/s 1907-10-01 2021-03-10 ## 3 uS/cm @25C 2006-12-20 2008-09-29 7.5 Finding IDs to download USGS data You can find sites via map and just enter the id like we did in the chunks above: https://maps.waterdata.usgs.gov/mapper/index.html Below we will look at two other ways to get sites: using a bounding box of a geographic region, or search terms like State and drainage area #find sites in a bounding box #coords of bottom left, top right swva &lt;- c(-81.36, 36.72, -80.27, 37.32) #get sites in this bounding box that have daily water temperature and discharge swva_sites &lt;- whatNWISsites(bBox = swva, parameterCd = c(&quot;00060&quot;, &quot;00010&quot;), hasDataTypeCd = &quot;dv&quot;) swva_sites ## agency_cd site_no station_nm ## 1 USGS 03473500 M F HOLSTON RIVER AT GROSECLOSE, VA ## 2 USGS 03175140 WEST FORK COVE CREEK NEAR BLUEFIELD, VA ## 3 USGS 03177710 BLUESTONE RIVER AT FALLS MILLS, VA ## 4 USGS 03177700 BLUESTONE RIVER AT BLUEFIELD, VA ## 5 USGS 03166000 CRIPPLE CREEK NEAR IVANHOE, VA ## 6 USGS 03164500 NEW RIVER NEAR GRAYSON, VA ## 7 USGS 03165500 NEW RIVER AT IVANHOE, VA ## 8 USGS 03166880 WEST SP AT NAT FISH HAT NEAR GRAHAMS FORGE, VA ## 9 USGS 03166800 GLADE CREEK AT GRAHAMS FORGE, VA ## 10 USGS 03166900 BOILING SP AT NAT FISH HAT NR GRAHAMS FORGE, VA ## 11 USGS 03167000 REED CREEK AT GRAHAMS FORGE, VA ## 12 USGS 03175500 WOLF CREEK NEAR NARROWS, VA ## 13 USGS 03168500 PEAK CREEK AT PULASKI, VA ## 14 USGS 03168000 NEW RIVER AT ALLISONIA, VA ## 15 USGS 03167500 BIG REED ISLAND CREEK NEAR ALLISONIA, VA ## 16 USGS 03172500 WALKER CREEK AT STAFFORDSVILLE, VA ## 17 USGS 03173000 WALKER CREEK AT BANE, VA ## 18 USGS 03171500 NEW RIVER AT EGGLESTON, VA ## 19 USGS 03171000 NEW RIVER AT RADFORD, VA ## 20 USGS 03170000 LITTLE RIVER AT GRAYSONTOWN, VA ## 21 USGS 03169500 LITTLE RIVER NEAR COPPER VALLEY, VA ## site_tp_cd dec_lat_va dec_long_va colocated queryTime ## 1 ST 36.88873 -81.34733 FALSE 2021-03-11 12:36:16 ## 2 ST 37.18428 -81.32982 FALSE 2021-03-11 12:36:16 ## 3 ST 37.27151 -81.30482 FALSE 2021-03-11 12:36:16 ## 4 ST 37.25595 -81.28177 FALSE 2021-03-11 12:36:16 ## 5 ST 36.85984 -80.98036 FALSE 2021-03-11 12:36:16 ## 6 ST 36.75985 -80.95619 FALSE 2021-03-11 12:36:16 ## 7 ST 36.83485 -80.95258 FALSE 2021-03-11 12:36:16 ## 8 SP 36.93429 -80.90313 FALSE 2021-03-11 12:36:16 ## 9 ST 36.93095 -80.90036 FALSE 2021-03-11 12:36:16 ## 10 SP 36.93068 -80.89619 FALSE 2021-03-11 12:36:16 ## 11 ST 36.93901 -80.88730 FALSE 2021-03-11 12:36:16 ## 12 ST 37.30568 -80.84980 FALSE 2021-03-11 12:36:16 ## 13 ST 37.04734 -80.77618 FALSE 2021-03-11 12:36:16 ## 14 ST 36.93762 -80.74563 FALSE 2021-03-11 12:36:16 ## 15 ST 36.88901 -80.72757 FALSE 2021-03-11 12:36:16 ## 16 ST 37.24179 -80.71090 FALSE 2021-03-11 12:36:16 ## 17 ST 37.26818 -80.70951 FALSE 2021-03-11 12:36:16 ## 18 ST 37.28957 -80.61673 FALSE 2021-03-11 12:36:16 ## 19 ST 37.14179 -80.56922 FALSE 2021-03-11 12:36:16 ## 20 ST 37.03763 -80.55672 FALSE 2021-03-11 12:36:16 ## 21 ST 36.99652 -80.52144 FALSE 2021-03-11 12:36:16 #find sites with other criteria, VA, less than 20 sqmi, other criteria can be used.. #check out the CRAN documentation smallVA &lt;- readNWISdata(service = &quot;dv&quot;, stateCd = &quot;VA&quot;, parameterCd = &quot;00060&quot;, drainAreaMax = &quot;20&quot;, statCd = &quot;00003&quot;) 7.6 OK let’s download some data! We are going to use readNWISdv(), which downloads daily values. We will tell it which sites to download, which parameters to download, and then what time period to download. siteNumber gets the sites we want to download, USGS site numbers, as a character. We will use the swva_sites data we generated (yep, you can download multiple sites at once!) startDate and endDate get the…. start and end dates. IMPORTANT: These must be in YYY-MM-DD format, but you don’t have to tell R they are dates before you give them to the function, it’ll do that for you. parameterCd get the parameters you want to download. We want water temperature and discharge, which are “00060” and “00010,” respectively. Once we have the data, the column names correspond to the keys that identify them, for example, discharge will be 00060 something something. Fortunately the dataRetrieval package also provides “renameNWISColumns()” which translates these into words, making them more easily understood by humans. We can pipe the results of our download to that function after we get the data to make the column names easier to understand. start &lt;- &quot;2006-10-01&quot; end &lt;- &quot;2008-09-30&quot; params &lt;- c(&quot;00010&quot;, &quot;00060&quot;) swva_dat &lt;- readNWISdv(siteNumber = swva_sites$site_no, parameterCd = params, startDate = start, endDate = end) %&gt;% renameNWISColumns() Let’s plot the water temperature data as a line and control the color of the lines with the different sites. What could be better about this plot? swva_dat %&gt;% ggplot(aes(x = Date, y = Wtemp, color = site_no)) + geom_line() ## Warning: Removed 2218 row(s) containing missing values (geom_path). We can add site names with….More joins! Our swva_sites data has the names of the sites in human-friendly language. The column in the downloaded data and in the swva_sites data is called “site_no” so we just give that to the “by” argument. Perform a left join to add the names of the sites to the data. Then use select to remove some of the unnecessary columns. Then make the plot and then snazz it up with labels and a non-junky theme. swva_dat_clean &lt;- left_join(swva_dat, swva_sites, by = &quot;site_no&quot;) %&gt;% select(station_nm, site_no, Date, Flow, Wtemp, dec_lat_va, dec_long_va) swva_dat_clean %&gt;% ggplot(aes(x = Date, y = Wtemp, color = station_nm)) + geom_line()+ ylab(&quot;Water temperature (deg C)&quot;)+ xlab(element_blank())+ labs(color = &quot;Gage Site&quot;)+ theme_classic() ## Warning: Removed 2218 row(s) containing missing values (geom_path). 7.7 Pivoting: wide and long data Okay, so with the data above: what would you do if you wanted to subtract the discharge or temperature of one gage from another on the same river: to compute rate of change between the two sites, for instance. You could split them into two objects, then join based on date? Or…now hear me out… you could PIVOT them. A two-dimensional object can be either long or wide. Each has it’s advantages. LONG Each observation has it’s own row. In the first image below, the table on the left is long because each measure of “cases” has it’s own row. It’s year and country are identified by a second column, and the values in that column repeat a lot. (Look at country and year in the table on the left) WIDE Observations of different things have their own columns. In the second image below, notice in the right hand table there is a “cases” and “population” column rather than an identifier in a separate column like in the table on the left. Why? Long and wide data are more efficient for different things. Think about plotting a data set with 10 stream gages. If they are in a long format, you can just add color = Gage to your ggplot aes(). If they are in a wide format, meaning each gage has it’s own column, you’d have to write a new geom for EACH gage, because they’re all in separate columns. Now imagine you want to do some math to create new data: let’s say cases divided by population in the second image below…. How would you even do that using the data on the left? With the wide data on the right it is simply mutate(casesPERpop = cases / population). Finally, which table is easier to read in TABLE format (not a plot) in each of the two images below? Wide data is much more fitting for tables. Pivoting to a longer format Pivoting to a wider format dplyr, part of the tidyverse, has functions to convert data between wide and long data. I have to look up the syntax every single time I use them. But they are VERY useful. 7.8 Pivot Examples Back to our original question: I want to subtract the flow at Ivanhoe from the flow at Radford on the new river to see how much flow increases between the two sites through time. To do this I am going to use pivot_wider() to give Ivanhoe and Radford discharges their own column. First, we will use select to trim the data to just what we need, then call pivot_wider telling it which data to use for the new column names (names_from = station_nm) and what values we want to pivot into the data under those columns (values_from = Flow). Then, subtract the two and make a plot! #Pivot so we can compute diffs between one river and others swva_wide &lt;- swva_dat_clean %&gt;% select(station_nm, Flow, Date) %&gt;% pivot_wider(names_from = station_nm, values_from = Flow) swva_wide &lt;- swva_wide %&gt;% mutate(Radford_Ivanhoe = `NEW RIVER AT RADFORD, VA` - `NEW RIVER AT IVANHOE, VA`) ggplot(swva_wide, aes(x = Date, y = Radford_Ivanhoe))+ geom_line()+ ggtitle(&quot;Change in flow from Ivanhoe to Radford&quot;)+ theme_classic() To further illustrate how to move between long and wide data and when to use them, let’s grab some water quality data. This process will also review some of the other concepts from this topic. In the chunk below we will look to see what sites have data for nitrate and chloride in our swva bounding box from above. We will them filter them to just stream sites (leave out groundwater and springs). And finally we will download the nitrate and chloride data for those sites. #Nitrate as nitrate and chloride params &lt;- c(&quot;00940&quot;, &quot;71851&quot;) #what sites in our bounding box have cloride and nitrate swva_chem_sites &lt;- whatNWISsites(bBox = swva, parameterCd = params) #filte to just stream water swva_chem_sites &lt;- filter(swva_chem_sites, site_tp_cd == &quot;ST&quot;) wqdat &lt;- readNWISqw(siteNumber = swva_chem_sites$site_no, parameterCd = params) comment(wqdat) ## [1] &quot;#&quot; ## [2] &quot;# File created on 2021-03-11 12:36:22 EST&quot; ## [3] &quot;#&quot; ## [4] &quot;# U.S. Geological Survey&quot; ## [5] &quot;# &quot; ## [6] &quot;# This file contains selected water-quality data for stations in the National Water &quot; ## [7] &quot;# Information System water-quality database. Explanation of codes found in this file are &quot; ## [8] &quot;# followed by the retrieved data. &quot; ## [9] &quot;#&quot; ## [10] &quot;# The data you have secured from the USGS NWISWeb database may include data that have &quot; ## [11] &quot;# not received Director&#39;s approval and as such are provisional and subject to revision. &quot; ## [12] &quot;# The data are released on the condition that neither the USGS nor the United States &quot; ## [13] &quot;# Government may be held liable for any damages resulting from its authorized or &quot; ## [14] &quot;# unauthorized use.&quot; ## [15] &quot;#&quot; ## [16] &quot;# To view additional data-quality attributes, output the results using these options: &quot; ## [17] &quot;# one result per row, expanded attributes. Additional precautions are at:&quot; ## [18] &quot;# https://help.waterdata.usgs.gov/tutorials/water-quality-data/help-using-the-water-quality-data-retrieval-system#Data_retrievals_precautions&quot; ## [19] &quot;#&quot; ## [20] &quot;# agency_cd - Agency Code&quot; ## [21] &quot;# site_no - USGS site number&quot; ## [22] &quot;# sample_dt - Begin date&quot; ## [23] &quot;# sample_tm - Begin time&quot; ## [24] &quot;# sample_end_dt - End date&quot; ## [25] &quot;# sample_end_tm - End time&quot; ## [26] &quot;# sample_start_time_datum_cd - Time datum&quot; ## [27] &quot;# tm_datum_rlbty_cd - Time datum reliability code&quot; ## [28] &quot;# coll_ent_cd - Agency Collecting Sample Code&quot; ## [29] &quot;# medium_cd - Sample Medium Code&quot; ## [30] &quot;# project_cd - Project code&quot; ## [31] &quot;# aqfr_cd - Geologic unit code&quot; ## [32] &quot;# tu_id - Taxonomic unit code&quot; ## [33] &quot;# body_part_id - Body part code&quot; ## [34] &quot;# hyd_cond_cd - Hydrologic Cond Code&quot; ## [35] &quot;# samp_type_cd - Sample Type Code&quot; ## [36] &quot;# hyd_event_cd - Hydrologic Event Code&quot; ## [37] &quot;# sample_lab_cm_tx - Message from lab&quot; ## [38] &quot;# parm_cd - Parameter code&quot; ## [39] &quot;# remark_cd - Remark code&quot; ## [40] &quot;# result_va - Parameter value&quot; ## [41] &quot;# val_qual_tx - Result value qualifier code&quot; ## [42] &quot;# meth_cd - Method code&quot; ## [43] &quot;# dqi_cd - Data-quality indicator code&quot; ## [44] &quot;# rpt_lev_va - Reporting level&quot; ## [45] &quot;# rpt_lev_cd - Reporting level type&quot; ## [46] &quot;# lab_std_va - Lab standard deviation&quot; ## [47] &quot;# prep_set_no - Prep set number&quot; ## [48] &quot;# prep_dt - Result prep date&quot; ## [49] &quot;# anl_set_no - Analysis set number&quot; ## [50] &quot;# anl_dt - Result analysis date&quot; ## [51] &quot;# result_lab_cm_tx - Lab result comment&quot; ## [52] &quot;# anl_ent_cd - Analyzing entity code&quot; ## [53] &quot;#&quot; ## [54] &quot;# The following parameters are included:&quot; ## [55] &quot;# 00940 - Chloride, water, filtered, milligrams per liter&quot; ## [56] &quot;# 71851 - Nitrate, water, filtered, milligrams per liter as nitrate&quot; ## [57] &quot;#&quot; ## [58] &quot;# Description of sample_start_time_datum_cd:&quot; ## [59] &quot;# EST - Eastern Standard Time&quot; ## [60] &quot;# EDT - Eastern Daylight Time&quot; ## [61] &quot;#&quot; ## [62] &quot;# Description of tm_datum_rlbty_cd:&quot; ## [63] &quot;# K - Known&quot; ## [64] &quot;# T - Transferred&quot; ## [65] &quot;#&quot; ## [66] &quot;# Description of coll_ent_cd and anl_ent_cd:&quot; ## [67] &quot;# USGS-WRD - U.S. Geological Survey-Water Resources Discipline&quot; ## [68] &quot;# USGS-NYL - USGS-NY WSC Low Ionic Strength Lab,Troy(formerly Albany)&quot; ## [69] &quot;#&quot; ## [70] &quot;# Description of medium_cd:&quot; ## [71] &quot;# WS - Surface water&quot; ## [72] &quot;#&quot; ## [73] &quot;# Description of aqfr_cd:&quot; ## [74] &quot;#&quot; ## [75] &quot;# Description of tu_id:&quot; ## [76] &quot;# https://www.itis.gov/&quot; ## [77] &quot;#&quot; ## [78] &quot;# Description of body_part_id:&quot; ## [79] &quot;#&quot; ## [80] &quot;# Description of hyd_cond_cd:&quot; ## [81] &quot;# 4 - Stable, low stage&quot; ## [82] &quot;# 5 - Falling stage&quot; ## [83] &quot;# 6 - Stable, high stage&quot; ## [84] &quot;# 8 - Rising stage&quot; ## [85] &quot;# 9 - Stable, normal stage&quot; ## [86] &quot;# A - Not determined&quot; ## [87] &quot;#&quot; ## [88] &quot;# Description of samp_type_cd:&quot; ## [89] &quot;# 7 - Replicate&quot; ## [90] &quot;# 9 - Regular&quot; ## [91] &quot;#&quot; ## [92] &quot;# Description of hyd_event_cd:&quot; ## [93] &quot;# 9 - Routine sample&quot; ## [94] &quot;#&quot; ## [95] &quot;# Description of remark_cd:&quot; ## [96] &quot;#&quot; ## [97] &quot;# Description of val_qual_tx:&quot; ## [98] &quot;#&quot; ## [99] &quot;# Description of meth_cd:&quot; ## [100] &quot;# ALGOR - Computation by NWIS algorithm&quot; ## [101] &quot;# CL031 - Chloride, wf, ASF thiocyanate&quot; ## [102] &quot;# IC022 - Anions, wf, IC&quot; ## [103] &quot;# IC034 - Anions, wf, IC (USGS-NYL)&quot; ## [104] &quot;#&quot; ## [105] &quot;# Description of dqi_cd:&quot; ## [106] &quot;# A - Historical data&quot; ## [107] &quot;# R - Reviewed and approved&quot; ## [108] &quot;#&quot; ## [109] &quot;# Description of rpt_lev_cd:&quot; ## [110] &quot;# MRL - Minimum reporting level&quot; ## [111] &quot;#&quot; ## [112] &quot;# Data for the following sites are included:&quot; ## [113] &quot;# USGS 03165500 NEW RIVER AT IVANHOE, VA&quot; ## [114] &quot;# USGS 03167000 REED CREEK AT GRAHAMS FORGE, VA&quot; ## [115] &quot;# USGS 03167500 BIG REED ISLAND CREEK NEAR ALLISONIA, VA&quot; ## [116] &quot;# USGS 03168000 NEW RIVER AT ALLISONIA, VA&quot; ## [117] &quot;# USGS 03168500 PEAK CREEK AT PULASKI, VA&quot; ## [118] &quot;# USGS 03170000 LITTLE RIVER AT GRAYSONTOWN, VA&quot; ## [119] &quot;# USGS 03171000 NEW RIVER AT RADFORD, VA&quot; ## [120] &quot;# USGS 03171500 NEW RIVER AT EGGLESTON, VA&quot; ## [121] &quot;# USGS 03172500 WALKER CREEK AT STAFFORDSVILLE, VA&quot; ## [122] &quot;# USGS 03173000 WALKER CREEK AT BANE, VA&quot; ## [123] &quot;# USGS 03175500 WOLF CREEK NEAR NARROWS, VA&quot; ## [124] &quot;# USGS 03473500 M F HOLSTON RIVER AT GROSECLOSE, VA&quot; ## [125] &quot;# USGS 371852081031201 006.0 EAST RIVER NEAR ENGLESIDE, W. VA.&quot; ## [126] &quot;# USGS 370853081003801 AT 23045 UNNAMED EPHEMERAL TRIB TO WALKER CREEK VA&quot; ## [127] &quot;# USGS 370941081005201 AT 23045.5 UNNAMED INTERMIT TRIB TO KIMBERLING CR&quot; ## [128] &quot;# USGS 370847081055101 AT 23046 KIMBERLING CREEK VA&quot; ## [129] &quot;# USGS 371250080511401 AT 22014 DISMAL CREEK VA&quot; ## [130] &quot;# USGS 370534081144701 AT 22013 HUNTING CAMP CREEK VA&quot; ## [131] &quot;# USGS 370603081120801 AT 22013.5 LAUREL CR AT MOUTH OF LITTLE WOLF CR VA&quot; ## [132] &quot;#&quot; Now, let’s clean things up a bit. Join the parameter names from parameterCdFile and then join the site names from swva_chem_site. Then select just the columns we want, and finally filter the remaining data to just look at sites from the New River. To illustrate the functionality of the data in this format, plot Chloride for each site, and then plot Chloride AND Nitrate, using the parameter name in facet_wrap. wqdat_clean &lt;- wqdat %&gt;% left_join(parameterCdFile, by = c(&quot;parm_cd&quot; = &quot;parameter_cd&quot;)) %&gt;% left_join(swva_chem_sites, by = &quot;site_no&quot;) %&gt;% select(station_nm, sample_dt, sample_tm, result_va, srsname, parameter_units) %&gt;% filter(str_detect(station_nm, &quot;NEW RIVER&quot;)) wqdat_clean %&gt;% filter(srsname == &quot;Chloride&quot;) %&gt;% ggplot(aes(x = sample_dt, y = result_va, color = station_nm)) + geom_point()+ ylab(&quot;Chloride (mg/L)&quot;)+ xlab(element_blank())+ labs(color = &quot;Site&quot;)+ theme_classic() wqdat_clean %&gt;% ggplot(aes(x = sample_dt, y = result_va, color = station_nm)) + geom_point()+ facet_wrap(facets = &quot;srsname&quot;, nrow = 2)+ ylab(&quot;Concentration (mg/L)&quot;)+ xlab(element_blank())+ labs(color = &quot;Site&quot;)+ theme_classic() Now let’s say we want to calculate something with chloride and nitrate. We need to make the data wide so we have a nitrate column and a chloride column. Do that below. What goes into values_from? what goes into names_from? Next, plot Chloride + Nitrate. Could you do this with the data in the previous format? Finally, use pivot_longer to transform the data back into a long format. Often you’ll get data in a wide format and need to convert it to long, and we haven’t tried that yet. The only argument you’ll need to pass to pivot_longer() in this case is to tell it what columns to turn into the new DATA column (using the cols = ) parameter. #make wqdat_clean wide wqdat_wide &lt;- wqdat_clean %&gt;% select(-parameter_units) %&gt;% pivot_wider(values_from = result_va, names_from = srsname) ggplot(wqdat_wide, aes(x = sample_dt, y = Chloride + Nitrate)) + geom_point() ## Warning: Removed 106 rows containing missing values (geom_point). wqlonger &lt;- wqdat_wide %&gt;% pivot_longer(cols = c(&quot;Chloride&quot;, &quot;Nitrate&quot;)) "],["joinpivotDR.html", "Chapter 8 ACTIVITY Joins Pivots dataRetrieval 8.1 Load the tidyverse, dataRetrieval, and patchwork packages. 8.2 Problem 1 8.3 Problem 2 8.4 Problem 3 8.5 Problem 4 8.6 Problem 5 8.7 Problem 6 8.8 Problem 7", " Chapter 8 ACTIVITY Joins Pivots dataRetrieval Get this document at the template repository on github: https://github.com/VT-Hydroinformatics/7-Activity-Joins-Pivots_dataRetrieval 8.1 Load the tidyverse, dataRetrieval, and patchwork packages. library(tidyverse) library(dataRetrieval) library(patchwork) 8.2 Problem 1 Using readNWISqw(), read all the chloride (00940) data for the New River at Radford (03171000). Use the head() function to print the beginning of the output from readNWISqw. 8.3 Problem 2 Using the readNWISdv (daily values) function, download discharge (00060), temperature (00003), and specific conductivity (00095) for the New River at Radford from 2007 to 2009 (regular year). Use renameNWIScolumns() to rename the output of the download. Use head() to show the beginning of the results of your download. 8.4 Problem 3 Do a left join on newphys and newriver to add the chloride data to the daily discharge, temp, and conductivity data. hint: you will join on the date. Preview your data below the chunk using head(). 8.5 Problem 4 Create a line plot of Date (x) and Flow (y). Create a scatter plot of Date (x) and chloride concentration (y). Put the graphs on top of each other using the patchwork library. 8.6 Problem 5 Create a scatter plot of Specific Conductivity (y) and Chloride (x). Challenge: what could you do to get rid of the warning this plot generates about NAs. 8.7 Problem 6 Read in the GG chem subset data and plot Mg_E1 (x) vs Ca_E1 (y) as points. 8.8 Problem 7 We want to look at concentrations of each element in the #6 dataset along the stream (Distance), which is difficult in the current format. Pivot the data into a long format, the data from Ca, Mg, and Na _E1 columns should be pivoted. Make line plots of each element where y is the concentration and x is distance. Use facet_wrap() to create a separate plot for each element and use the “scales” argument of facet_wrap to allow each plot to have different y limits. "],["Summative1.html", "Chapter 9 ACTIVITY Summative 1 9.1 Problem 1 9.2 Problem 2 9.3 Problem 3 9.4 Problem 4 9.5 Problem 5 9.6 Problem 6 9.7 Problem 7 9.8 Problem 8 9.9 Problem 9 9.10 Problem 10", " Chapter 9 ACTIVITY Summative 1 Get this document at the template repository on github: https://github.com/VT-Hydroinformatics/8-Test_1 9.0.1 Instructions Please read carefully! Write your code in the provided code chunks and answer any questions by typing outside the chunk. Comment your code to let me know what you are trying to do, in case something doesn’t work. Turn in a knitted rmd (html or pdf). If you can’t get your document to knit when you go to turn it in, just comment out the lines of code that are causing the knit to fail, knit the document, and submit. 9.1 Problem 1 Load the tidyverse, lubridate, and dataRetrieval packages. 9.2 Problem 2 Read in the McDonald Hollow dataset in the project folder. What are the data types of the first three columns? How long is the data (number of rows)? What is the name of the last column? 9.3 Problem 3 Plot the stage of the stream (Stage_m_pt) on the y axis as a line and the date on the x. These stage data are in meters, convert them to centimeters for the plot. For all plots in this test, label axes properly and use a theme other than the default. 9.4 Problem 4 We want to look at the big event that happens from November 11, 2020 to November 27, 2020. Filter the dataset down to this time frame and save it separately. Make a plot with the same setup as in #3 with these newly saved data. 9.5 Problem 5 For this storm, we are curious about how conductivity changes with the stream level. To do this, make a scatter plot that shows Stage on the x axis and specific conductivity (SpC_mScm) on the y. (units: mScm) Color the points on the plot using the datetime column. Use the plot to describe how specific conductivity changes with stream stage throughout the storm. (not functionally, just how the values change) 9.6 Problem 6 Continuing to look at the storm, as an exploratory data analysis, we want to create a plot that shows all the parameters measured. To do this, pivot the STORM EVENT data so there is a column that has the values for all the parameters measured as individual rows, along with another column that identifies the type of measurement. Then use facet_wrap with the “name” column (or whatever you call it) as the facet. Be sure to set the parameters of facet_wrap such that the y axes are all allowed to be different ranges. EX: Date Value Name 10/1/20 12 Stage 10/1/20 6 Temp …. 9.7 Problem 7 We want to create a table that clearly shows the differences in water temperature for the three months at the two locations (flow and pool) in the FULL data set (not the storm subset). To do this: Create a new column in the full dataset called “month” and set it equal to the month of the datetime column using the month() function. Then group your dataset by month and summarize temperature at each location by mean. Save these results to a new object and output it so it appears below your chunk when you knit. Be sure the object has descriptive column names. You can do this all in one statement using pipes. 9.8 Problem 8 Plot the distribution of the flow temperature and show as vertical lines on the plot the mean, median, and IQR. Be careful about how you show IQR. Look at the definition and then think about how you would put it on the plot. Describe in the text above the chunk what color is what statistic in the plot. Using the shape of the distribution and the measures you plotted, explain why you think the distribution is normal or not. What statistical test could you perform to see if it is normal? 9.9 Problem 9 In this question we will get and format data for three USGS gages. Gages: 03177710, 03173000, 03177480 Discharge in cubic feet per second (cfs) code: 00060 Read and save the gage information for the three gages using readNWISsite(). Use the readNWISdv() function to read and save the daily discharge values for the following three gages for the 2020 water year (10-01-2019 to 9-30-2020). And then use the renameNWIScolumns() function to make the names human-friendly. Join the gage site information from (a) to the data from (b) so you can reference the gages by their names. 9.10 Problem 10 Using the data from #9, Plot flow on the y axis and date on the x axis, showing the data as a line, and coloring by gage name. "],["fdcs.html", "Chapter 10 Flow Duration Curves 10.1 Get data 10.2 Review: describe the distribution 10.3 ECDFs 10.4 Calculate flow exceedence probabilities 10.5 Plot a Flow Duration Curve using the probabilities 10.6 Make an almost FDC with stat_ecdf 10.7 Example use of an FDC 10.8 Compare to a boxplot of the same data 10.9 Challenge: Examining flow regime change at the Grand Canyon", " Chapter 10 Flow Duration Curves Get this document and a version with empty code chunks at the template repository on github: https://github.com/VT-Hydroinformatics/9-Flow-Duration-Curves Alright team. So far we have learned to wrangle data, make plots, and look at data distributions. Now it is time to put all that knowledge to use. We are on our way to doing analyses of extreme discharge events: low flow statistics and floods. But in order to do that, we need to understand a common way to look at data distributions in hydrology: the flow duration curve. As you’ll see below, this is basically just a different way of looking at a pdf, and it can take some getting used to. But it is also a very useful tool! As always let’s load the packages we will use: tidyverse, dataRetrieval, lubridate, and patchwork. Patchwork will help us make a multi-panel graph in the last part of the exercise. We will also use theme_set() in this chunk so we don’t have to change the ggplot theme every time we make a plot. library(tidyverse) library(dataRetrieval) library(lubridate) library(patchwork) #set plot theme for the document so we #don&#39;t have to do it in every plot theme_set(theme_classic()) 10.1 Get data To start, let’s grab the USGS discharge data for the gage in Linville NC from 1960 to 2020. We will download the data using USGS dataRetrieval and look at a line plot. siteno &lt;- &quot;02138500&quot; #Linville NC startDate &lt;- &quot;1960-01-01&quot; endDate &lt;- &quot;2020-01-01&quot; parameter &lt;- &quot;00060&quot; Qdat &lt;- readNWISdv(siteno, parameter, startDate, endDate) %&gt;% renameNWISColumns() #Look at the data Qdat %&gt;% ggplot(aes(x = Date, y = Flow))+ geom_line() 10.2 Review: describe the distribution Make a plot to view the distribution of the discharge data. What is the median flow value? What does this tell us about flow at that river? How often is the river at or below that value? Could you pick that number off the plot? What about the flow the river is at or above only 5% of the time? Qdat %&gt;% ggplot(aes(Flow))+ stat_density()+ scale_x_log10()+ geom_vline(xintercept = median(Qdat$Flow), color = &quot;red&quot;) 10.3 ECDFs Let’s look at an Empirical Cumulative Density Function (ECDF) of the data. Look at this carefully, what does it show? How is it different from the pdf of the data? Plot the median again. Without the line on the plot, how would you tell where the median is? Given your answer to the question above, can you determine the flow the river is at or above only 25% of the time? Think carefully about what the y axis of the ECDF means. Qdat %&gt;% ggplot(aes(Flow))+ stat_ecdf()+ scale_x_log10()+ geom_vline(xintercept = median(Qdat$Flow), color = &quot;red&quot;)+ geom_vline(xintercept = quantile(Qdat$Flow)[4], color = &quot;blue&quot;) 10.4 Calculate flow exceedence probabilities In hydrology, it is common to look at a similar representation of flow distributions, but with flow on the Y axis and “% time flow is equaled or exceeded” on the X axis. There are a number of ways we could make this plot: for example we could transform the axes of the plot above or we could use the function that results from the ECDF function in R to calculate exceedence probabilities at flow throughout our range of flows. But for our purposes, we are just going to calculate it manually. We are going to calculate our own exceedence probabilities because knowing how to do this will hopefully help us understand what a flow duration curve is AND we will need to do similar things in our high and low flow analyses. The formula for exceedence probability (P) is below. What do we need to calculate this? Exceedence probability (P), Probability a flow is equaled or exceeded \\(P = 100 * [M / (n + 1)]\\) M = Ranked position of the flow n = total number of observations in data record Here’s a description of what we will do: Pass our Qdat data to mutate and create a new column that is equal to the ranks of the discharge column. Then pass that result to mutate again and create another column equal exceedence probability (P) * 100, which will give us %. #Flow is negative in rank() to make #high flows ranked low (#1) Qdat &lt;- Qdat %&gt;% mutate(rank = rank(-Flow)) %&gt;% mutate(P = 100 * (rank / (length(Flow) + 1))) 10.5 Plot a Flow Duration Curve using the probabilities Now construct the following plot: A line with P on the x axis and flow on the y axis. Name the x axis “% Time flow equaled or exceeded” and log the y axis. That’s a flow duration curve! Questions about the flow duration curve: How often is a flow of 100 cfs exceeded at this gage? Is flow more variable for flows exceeded 0-25% or of the time or 75-100% * of the time? How can you tell? These data are daily observations. Given that, what is a more accurate name for the x axis? What would the X axis be called if we were using maximum yearly data? Qdat %&gt;% ggplot(aes(x = P, y = Flow))+ geom_line()+ scale_y_log10()+ xlab(&quot;% Time flow equalled or exceeded&quot;)+ ylab(&quot;Q (cfs)&quot;) 10.6 Make an almost FDC with stat_ecdf Below is an example of making a very similar plot with the stat_ecdf() geometry in ggplot. Notice how similar the result is to the one we calculated manually. To make the plot similar, we will reverse the y axis of the ecdf plot with scale_y_reverse and flip the axes (change the x to y and the y to x) with coord_flip() Qdat %&gt;% ggplot(aes(Flow))+ stat_ecdf()+ scale_x_log10()+ scale_y_reverse()+ coord_flip()+ xlab(&quot;Q (cfs)&quot;)+ ylab(&quot;Probability flow is not exceeded&quot;) 10.7 Example use of an FDC Let’s explore one potential use of flow duration curves: examining the differences between two sets of flow data. From the line plot of the discharge, it looked like the flow regime may have shifted a bit in the data between the early years and newer data. Let’s use flow duration curves to examine potential differences. We can come up with groups and then use group_by to run the analysis by groups instead of the whole dataset. We are introducing a new function here called case_when(). This allows you to assign values to a new column based on values in another column. In our case, we are going to name different time periods in our data. We will then group the data by these periods and calculate exceedence probabilities for each. The procedure works the same, except we add a group_by statement to group by our time period column before we create the rank and P columns. Then, when we plot, we can just tell ggplot to create different colored lines based on the time period names and it will plot a separate flow duration curve for each. Tidyverse FOR THE WIN! Describe the differences in flow regime you see between the three periods of 1960-1980, 1980-2000, and 2000-2020. Qdat &lt;- Qdat %&gt;% mutate(year = year(Date)) %&gt;% mutate(period = case_when( year &lt;= 1980 ~ &quot;1960-1980&quot;, year &gt; 1980 &amp; year &lt;= 2000 ~ &quot;1980-2000&quot;, year &gt; 2000 ~ &quot;2000-2020&quot;)) Qdat &lt;- Qdat %&gt;% group_by(period) %&gt;% mutate(rank = rank(-Flow)) %&gt;% mutate(P = 100 * (rank / (length(Flow) + 1))) Qdat %&gt;% ggplot(aes(x = P, y = Flow, color = period))+ geom_line()+ scale_y_log10()+ xlab(&quot;% Time flow equalled or exceeded&quot;)+ ylab(&quot;Q (cfs)&quot;) 10.8 Compare to a boxplot of the same data We are really just looking at the data distribution here. Remember another good way to compare distributions is a boxplot. Let’s create a boxplot showing flows from these time periods. (we will also mess with the dimensions of the plot so the boxes aren’t so wide using fig.width and fig.height in the ``` header above the code chunk) What are the advantages/disadvantages of the flow duration curves vs. boxplots? Qdat %&gt;% ggplot(aes(x = period, y = Flow)) + geom_boxplot()+ scale_y_log10() 10.9 Challenge: Examining flow regime change at the Grand Canyon The USGS Gage “Colorado River at Yuma, AZ” is below the Hoover dam. The Hoover Dam closed in 1936, changing the flow of the Colorado River below. Load average daily discharge data from 10-01-1905 to 10-01-1965 from the Yuma gage. Use a line plot of discharge and flow duration curves to examine the differences in discharge for the periods: 1905 - 1936, 1937 - 1965. How does the FDC show the differences you observed in the line plot? siteid &lt;- &quot;09521000&quot; startDate &lt;- &quot;1905-10-01&quot; endDate &lt;- &quot;1965-10-01&quot; parameter &lt;- &quot;00060&quot; WS &lt;- readNWISdv(siteid, parameter, startDate, endDate) %&gt;% renameNWISColumns() %&gt;% mutate(year = year(Date)) %&gt;% mutate(period = case_when( year &lt;= 1936 ~ &quot;Pre Dam&quot;, year &gt; 1936 ~ &quot;Post Dam&quot;)) %&gt;% group_by(period) %&gt;% mutate(rank = rank(-Flow)) %&gt;% mutate(P = 100 * (rank / (length(Flow) + 1))) flow &lt;- ggplot(WS, aes(Date, Flow))+#, color = period))+ geom_line()+ ylab(&quot;Q (cfs)&quot;) fdc &lt;- WS %&gt;% ggplot(aes(x = P, y = Flow, color = period))+ geom_line()+ #scale_y_log10()+ xlab(&quot;% Time flow equalled or exceeded&quot;)+ ylab(&quot;Q (cfs)&quot;) flow / (fdc + plot_spacer()) That’s it! Next we will apply some of these principles to look at low-flow statistics. "],["lfas.html", "Chapter 11 Low Flow Analysis 11.1 What are low flow statistics? 11.2 Get data 11.3 Create the X days average flow record 11.4 Look at what a rolling mean does. 11.5 Calculate yearly minimums 11.6 Calculate return interval 11.7 Fit to Pearson Type II distribution 11.8 Distribution-free method", " Chapter 11 Low Flow Analysis Get this document and a version with empty code chunks at the template repository on github: https://github.com/VT-Hydroinformatics/10-Low-Flow-Analysis Pre-activity reading: https://www.epa.gov/ceam/definition-and-characteristics-low-flows#1Q10 Analysis based on: https://github.com/DEQdsobota/Oregon7Q10/blob/master/R/Oregon7Q10.R https://nepis.epa.gov/Exe/ZyPDF.cgi?Dockey=P100BK6P.txt Load packages for analysis. zoo will allow us to easily perform rolling means, and moments will allow easy calculation of skewness. library(zoo) library(tidyverse) library(dataRetrieval) library(lubridate) library(moments) theme_set(theme_classic()) 11.1 What are low flow statistics? Low flow design flows can be specified based on hydrological or biological data. Biological methods look more at water quality standards relevant to biota. The hydrologic method just looks at the statistical distribution of low flows over a period of time. Just from this simple definition, can you think of a management situation where it would make sense to use the biological method? the hydrologic method? What are the advantages to each? We will focus on hydrologic methods. What a surprise! You will most frequently see low flow stats in the format of xQy. So for example 7Q10 or 1Q10 are common design flows. Let’s look at the EPA definition of these and then break them down. “The 1Q10 and 7Q10 are both hydrologically based design flows. The 1Q10 is the lowest 1-day average flow that occurs (on average) once every 10 years. The 7Q10 is the lowest 7-day average flow that occurs (on average) once every 10 years.” -EPA https://www.epa.gov/ceam/definition-and-characteristics-low-flows#1Q10 So the first number, the 7 in 7Q10 is how many days we will average flow over to calculate the statistic. Why does does this matte? Why not always use a 1 day flow record? Then the second number is the return-interval of the flow, or the probability that a flow of that magnitude or lower will occur any given year. The 10 in 7Q10 means there is a 10 percent chance that the associated 7-day average flow or below will occur in any given year. Another way of saying this is that a flow of that magnitude or below occurs on average once every 10 years. However expressing it this way can be dangerous, especially with the opposite type of extreme flows: Floods. Why do you think it could be dangerous to say a flow of this magnitude or below will happen on average once every 10 years? So, to calculate a 7Q10 we need: * 7-day mean-daily flows * The minumum value per year of those 7-day mean-daily flows * The return intervals of those flows minimum yearly flows Because a 7Q10 flow means * There is a 10% chance (return interval = 10) that a river will have a average weekly flow of that level or below in a given year. 11.2 Get data Let’s get started on an example. We will calculate the 7Q10 low flow statistic for the Linville NC usgs gage (02138500) using daily discharge data from 1922-1984. (parameter = 00060) siteno &lt;- &quot;02138500&quot; startDate &lt;- &quot;1922-01-01&quot; endDate &lt;- &quot;1984-01-01&quot; parameter &lt;- &quot;00060&quot; Qdat &lt;- readNWISdv(siteno, parameter, startDate, endDate) %&gt;% renameNWISColumns() 11.3 Create the X days average flow record Remember the 7 in 7Q10 means we are looking at the 7-day average flow. We just have daily values from the USGS gage, so we need to create this data record. To do this we will calculate a rolling average, also called a moving-window average. This just means you grab the first 7 days, average them, then move the window of the days you are averaging forward a day, and average again… all the way through the record. For your rolling mean you can have the window look forward, backward, or forward and backward. For example, a forward window takes the average of X number of records and places the value at the beginning. Backward places that value at the end, and both would put it in the middle. In the function we will use to do this, forward is a left align, backward is right align, and both is centered. For example data window = 1, 2, 3, 4, 5 (lots of values before and after this) mean = 3 forward window/left align: 3, NA, NA, NA, NA backward window/right align: NA, NA, NA, NA, 3 both/center align: NA, NA, 3, NA, NA We could certainly set up some code to calculate this, but there is a nice and fast function in the zoo package for calculating rolling means. As we write the code to do this analysis, we are going to keep in mind that we may want to calculate a different type of low flow, like a 1Q10, so we are going to store the x and y of the xQy low flow statistic as objects rather than including them several places in the code. That way we can just change them in one place and run the analysis to compute a different statistic. #set x and y for xQy design flow Xday &lt;- 7 YrecInt &lt;- 10 #X day rolling mean, don&#39;t fill the ends of the timeseries, #don&#39;t ignore NAs, use a backward-looking window (right align) Qdat &lt;- Qdat %&gt;% mutate(xdaymean = rollmean(Flow, Xday, fill = NA, na.rm = F, align = &quot;right&quot;)) 11.4 Look at what a rolling mean does. We just added a new column with the rolling mean, so let’s plot it and see what it did to the discharge record. Let’s look at June-August 1960. You can’t see too well what is going on in the full record. Qdat %&gt;% filter(Date &gt; mdy(&quot;06-01-1960&quot;) &amp; Date &lt; mdy(&quot;08-01-1960&quot;)) %&gt;% ggplot(aes(Date, Flow, color = &quot;daily&quot;))+ geom_line()+ geom_line(aes(x = Date, y = xdaymean, color = &quot;rolling mean&quot;)) 11.5 Calculate yearly minimums Okay, we have our X-day rolling mean. Now we need to calculate the probability that a given magnitude flow or below will happen in a given year. Because we are concerned with a given year we need the lowest flow per year. We will calculate minimum flow per year by creating a Year column, grouping by that column, and using the summarize function to calculate the minimum flow per year. The code we are going to write will also drop any years that are missing too much data by dropping years missing 10% or more days. #missing less than 10% of each year and 10% or fewer NAs QyearlyMins &lt;- Qdat %&gt;% mutate(year = year(Date)) %&gt;% group_by(year) %&gt;% summarize(minQ = min(xdaymean, na.rm = T), lenDat = length(Flow), lenNAs = sum(is.na(xdaymean))) %&gt;% filter(lenDat &gt; 328 &amp; lenNAs / lenDat &lt; 0.1) 11.6 Calculate return interval Now that we have an object that contains our yearly minimum flows, we can calculate the return interval as \\(Return Interval = (n + 1) / rank\\) Where n is the number of records in the data (number of years) and rank is the rank of each year’s low flow (lowest flow = rank 1 and so on). We can calculate the rank with the rank() function in base R. In the rank function we will specify that in the case of a tie, the first value gets the lower rank using ties.method = “first.” We can then transform that to an exceedence probability as \\(Exceedence Probability = 1 / Return Interval\\) Once we calculate the return interval and exceedence probability we will plot the return interval against the minimum discharge. # add rank column and return interval column QyearlyMins &lt;- QyearlyMins %&gt;% mutate(rank = rank(minQ, ties.method = &quot;first&quot;)) %&gt;% mutate(ReturnInterval = (length(rank) + 1)/rank) %&gt;% mutate(ExceedProb = 1 / ReturnInterval) ggplot(QyearlyMins, aes(x = ReturnInterval, y = minQ))+ geom_point() Challenge question How is this similar to a flow duration curve? Could you make a “flow duration curve” from these data? What would it tell you? ggplot(QyearlyMins, aes(x = ExceedProb, y = minQ))+ geom_point() 11.7 Fit to Pearson Type II distribution Source for these calculations: https://water.usgs.gov/osw/bulletin17b/dl_flow.pdf We now have everything we need to calculate what the 10-year return interval flow is (the 0.1 probability flow). To do this, we have to fit a distribution to our data and then use that fitted distribution to predict the value of the 10-year return interval flow. This may sound a little complex, but let’s think about it this way: You have some data, let’s say: heights of students at Virginia Tech You did some tests on it and know it is a normal distribution If you measure the mean and standard deviation of that distribution, you could create a “fitted” representation of your distrubtion by generating a normal distribution with the same mean and standard deviation with the rnorm() function. Now you could plot that fitted, synthetic distribution as an ECDF and read the plot to determine, say, 10% of students (0.1 probability) are at or above what height? Assume the average height from your data was 65 inches and the standard deviation was 6 inches (this is 100% made up), let’s look at it. fitteddistribution &lt;- rnorm(1000, mean = 65, sd = 6) %&gt;% as_tibble() ggplot(fitteddistribution, aes(x = value))+ stat_ecdf()+ xlab(&quot;height (in)&quot;)+ ylab(&quot;probability&quot;) To get our 10 year return period (0.1 exceedence probability) we are going to do the same thing, except we know the distribution of the data isn’t normal, so we have to use a different distribution. There are a bunch of “extreme value” distributions used in these type of analyses. When we talk about floods we will use the Gumbel distribution, for example. For this type of analysis, it is common to use the Pearson Type III distribution. When we used the normal distribution example, we let R produce the distribution that fit our data. In this case we will use the equation that describes the Person Type III distribution. To predict flow at a given recurrence interval we will need the mean of the logged discharges (Xbar), the frequency factor (K), the standard deviation of the log discharges (S), skewness (g), and the standard normal variate (z). We will first compute this for all of the values in our dataset to see how the fitted values fit our calculated values. Pearson Type III \\(Flow = exp(Xbar + KS)\\) where: Xbar = mean of the log discharge you are investigating K = frequency factor S = standard deviation of log discharges Frequency Factor \\(K = (2 / g) * ((1 +( g * z)) / 6 - ((g ^ 2) / 36)) ^ 3 - 1)\\) Skewness g = skewness() from moments package Standard normal variate \\(z = 4.91 * ((1 / y) ^ {0.14} - (1 - (1 / y)) ^ {0.14})\\) y = recurrence interval #Measures of the distribution Xbar &lt;- mean(log(QyearlyMins$minQ)) S &lt;- sd(log(QyearlyMins$minQ)) g &lt;- skewness(log(QyearlyMins$minQ)) #calculate z, K, to plot the fitted Pearson Type III QyearlyMins &lt;- QyearlyMins %&gt;% mutate(z = 4.91 * ((1 / ReturnInterval) ^ 0.14 - (1 - 1 / ReturnInterval) ^ 0.14)) %&gt;% mutate(K = (2 / g) * (((1 + (g * z) / 6 - (g ^ 2) / 36) ^ 3) - 1) ) %&gt;% mutate(Qfit = exp(Xbar + K * S)) Let’s look our results and see how they fit. Plot the return interval on the x axis and flow on the y. Plot minQ, the minimum Q data, and Qfit, the data from the the model fit. QyearlyMins %&gt;% ggplot(aes(x = ReturnInterval, y = minQ, color = &quot;Estimated&quot;))+ geom_point()+ geom_line(aes(x = ReturnInterval, y = Qfit, color = &quot;Fitted&quot;))+ theme_classic()+ scale_x_log10()+ ylab(&quot;X day yearly minimum&quot;)+ xlab(&quot;Return Interval&quot;) Above we calculated z, K and the flow for each return interval in our data record to see how the distribution fit our data. We can see it fits quite well. We can use the same calculations as we used on the entire record to calculate a specific return period of interest. In our case, the 10 year return period for the 7Q10. We will set y equal to YrecInt, which we set above. This way we can just change it at the top of the code to run whatever xQy metric we want. #xQy ei: 7Q10 y = YrecInt #Find these values based on established relationships z &lt;- 4.91 * ((1 / y) ^ 0.14 - (1 - 1 / y) ^ 0.14) K &lt;- (2 / g) * (((1 + (g * z) / 6 - (g ^ 2) / 36) ^ 3) - 1) PearsonxQy &lt;- exp(Xbar + K * S) So, our 7Q10 flow in cfs for this gage is…. #Low flow stat (7Q10 in exercise) PearsonxQy ## [1] 16.70488 11.8 Distribution-free method We won’t go over this in the same detail, but the xQy flow can also be calculated using a formula that does not assume a specific distribution. The expression, and code to perform it, is below. The expression for xQy is: \\(xQy = (1-e) X(m1) + eX(m2)\\) where: [ ] indicates the value is truncated \\(X(m)\\) = the m-th lowest annual low flow of record \\(m1 = [(n+1)/y]\\) \\(m2 = [(n+l)/y] + 1\\) \\([z]\\) = the largest integer less than or equal to z \\(e = (n+l)/y - [(n+l)/y]\\) This method is only appropriate when the desired return period is less than n/5 years x &lt;- Xday y &lt;- YrecInt n &lt;- length(QyearlyMins$minQ) m1 &lt;- trunc((n + 1)/y) m2 &lt;- trunc(((n + 1)/y) + 1) e &lt;- ((n + 1)/y) - m1 Xm1 &lt;- QyearlyMins$minQ[QyearlyMins$rank == m1] Xm2 &lt;- QyearlyMins$minQ[QyearlyMins$rank == m2] DFxQy &lt;- (1-e) * Xm1 + e * Xm2 DFxQy ## [1] 15 "],["floods.html", "Chapter 12 Flood Frequency Analysis and Creating Functions 12.1 Template Repository 12.2 Introduction 12.3 Download and plot peak flow data 12.4 Compute ranks for peak flows 12.5 Calculate exceedance probability and return period 12.6 Calculate Gumbel distribution parameters 12.7 Calculate return interval for peak flows according to Gumbel distribution 12.8 Plot Gumbel distribution fit with peak flow data 12.9 Calculate magnitude of 1 in 100 chance flood 12.10 How to create your own functions 12.11 Create a return period function 12.12 Challenge: Create a function to compute the 1 in 100 chance flood for any USGS gage", " Chapter 12 Flood Frequency Analysis and Creating Functions 12.1 Template Repository The following activity is available as a template github repository at the following link: https://github.com/VT-Hydroinformatics/11-Flood-Frequency-and-Functions 12.2 Introduction This methods for this chapter are adapted from the following activity: https://serc.carleton.edu/hydromodules/steps/166250.html After working with Flow Duration Curves (FDCs) and performing a low flow analysis, we now understand all the concepts necessary to perform a flood frequency analysis. In this chapter we will perform a flood frequency analysis using a Gumbel extreme value distribution and then write our own function that will return the return interval of magnitude flow we want! At the end of the chapter you will be challenged to write a function that performs a flood frequency analysis for any USGS gage. First we will load the tidyverse and dataRetrieval packages and the set the theme for our plots. library(tidyverse) library(dataRetrieval) theme_set(theme_classic()) 12.3 Download and plot peak flow data Next, download the yearly peakflow data from USGS dataRetrieval using the readNWISpeak() function. We don’t have to create our own yearly values like we did in the low flow analysis. This function just returns the highest flow for each year. Download the data for the New River at Radford starting in 1945. Then make a plot of the peak flow for each year. radford &lt;- &quot;03171000&quot; peakflows &lt;- readNWISpeak(radford, startDate = &quot;1945-01-01&quot;) ggplot(peakflows, aes(peak_dt, peak_va))+ geom_point() 12.4 Compute ranks for peak flows As with the couple previous chapters, the next step is to create a column that contains the ranks of each flow in the record. Create a column that has the rank of each flow, with the highest flow ranked #1. Use select() to trim your dataset to just the peak data, peak values, and ranks columns. Make the plot from the last code chunk again but color the points by rank to check that this worked. Also, look at the data through the environment tab in rstudio or using head() to double check. #create rank column (minus flips the ranking) #then clean it up, pull out only peak value, date, rank peakflows &lt;- peakflows %&gt;% mutate(ranks = rank(-peak_va)) %&gt;% select(peak_dt, peak_va, ranks) #look at it ggplot(peakflows, aes(peak_dt, peak_va, color = ranks))+ geom_point() head(peakflows) ## peak_dt peak_va ranks ## 1 1945-09-18 62700 14.0 ## 2 1946-01-08 44400 34.0 ## 3 1947-01-20 34500 48.5 ## 4 1948-02-14 34500 48.5 ## 5 1949-08-29 40800 38.0 ## 6 1949-11-02 15200 73.0 12.5 Calculate exceedance probability and return period Now we need to calculate the exceedance probability and return interval for each value in our data. For flood frequency analysis, it is common to use the Gringorten plotting position formula: Plotting Position Formula qi = Exceedance probability N = Number of observations in your record i = Rank of specific observation, i = 1 is the largest, i = N is the smallest. a = constant for estimation = 0.44 \\(Non-exceedence probability = pi = 1 - qi\\) Return period \\(Tp = 1/(1-p)\\) In the chunk below, create a column in your dataset and calculate each: exceedance probability, non-exceedane probabily, and return period. Then make a plot with peak flow on the Y axis and Return Period on the X. N &lt;- length(peakflows$peak_dt) a &lt;- 0.44 #calculate exceedence/non-exceedence with gringorten and return period peakflows &lt;- peakflows %&gt;% mutate(qi = (ranks - a) / (N + 1 - (2*a))) %&gt;% mutate(pi = 1 - qi) %&gt;% mutate(TpEst = 1 / (1-pi)) #Plot peak flows on y and est return period on the x peakflows %&gt;% ggplot(aes(x = TpEst, y = peak_va)) + geom_point() 12.6 Calculate Gumbel distribution parameters Now we need to fit these data to a distribution in order to make a relationship we can use to predict the discharge of specific return intervals. There are many distributions that can be used in this situation, but a common one for flood frequency analyses is the Gumbel extreme value distribution: Gumbel Distribution x is observed discharge data, u and alpha are parameters that shape the distribution. We can calculate u and alpha in order to create a distribution that best fits our data with the following equations. Notice x bar is mean and sx2 is variance. We will need to find sx, which is the square root of the variance, also known as the standard deviation. Gumbel parameters In the chunk below, calculate u and alpha by first calculating xbar (mean) and sx (standard deviation) and then using them in the above equations for u and x. xbar &lt;- mean(peakflows$peak_va) sx &lt;- sd(peakflows$peak_va) alpha &lt;- (sqrt(6)*sx) / pi u &lt;- xbar - (0.5772 * alpha) 12.7 Calculate return interval for peak flows according to Gumbel distribution Now that we have the parameters that best represent our data as a Gumbel Distribution, we can use the formula to create the theoretical values for the return interval according to that distribution. Gumbel Distribution In the chunk below: First calculate p theoretical with the equation above. Then calculate Tp theoretical (the return period) as T was calculated above Tp = 1 / (1-p) Finally create a plot of return period on the y axis and peak values on the x. Include return periods calculated from your data and those calculated from the Gumbel distribution on your plot as points of different colors. peakflows &lt;- peakflows %&gt;% mutate(pTheoretical = exp(-exp(-((peak_va - u) / alpha)))) %&gt;% mutate(TpTheoretical = (1 / (1-pTheoretical))) peakflows %&gt;% ggplot(aes(x = TpEst, y = peak_va, color = &quot;Estimated&quot;)) + geom_point()+ geom_point(aes(x = TpTheoretical, y = peak_va, color = &quot;Theoretical&quot;))+ ylab(&quot;Annual Peak Flows&quot;)+ xlab(&quot;Return Period&quot;)+ theme_classic() 12.8 Plot Gumbel distribution fit with peak flow data Let’s look at these data a slightly different way to make it easier to see what is going on and how we can pull of flows for different return periods. Make the same plot as abote but show the theoretical values (from the distribution) as a line, with the estimated values as points, and log the x axis with limits set to 1 - 100. With this plot you could look up the return period for any flood or the discharge level for any return period. peakflows %&gt;% ggplot(aes(x = TpEst, y = peak_va, color = &quot;Estimated&quot;)) + geom_point()+ geom_line(aes(x = TpTheoretical, y = peak_va, color = &quot;Theoretical&quot;))+ ylab(&quot;Annual Peak Flows&quot;)+ xlab(&quot;Return Period&quot;)+ scale_x_log10(limits = c(1,100))+ theme_classic() ## Warning: Removed 1 rows containing missing values (geom_point). 12.9 Calculate magnitude of 1 in 100 chance flood This plot is showing a representation of the fitted distribution by calculating the return period for each point in our dataset. But we can also use it to calculated the specific flow that corresponds to any return period by using the established relationship. In the chunk below, calculate the magnitude of a 1 in 100 chance, or 100 year flood using the following two formulas where p = exceedance probability and Tp = return period. These are just the equations used to calculate return period rearranged to calculate peak flow. \\(p = Tp / (Tp - 1)\\) \\(peakflow = u - (alpha - log(log(p)))\\) According to this analysis, what is the 1 in 100 chance flood at this location? Do you see any issues with reporting this as the 1 in 100 chance flood? What are they? Tp = 100 p = Tp / (Tp - 1) peak_va = u - (alpha * log(log(p))) 12.10 How to create your own functions This is a good opportunity to illustrate the usefulness of writing your own functions. When you install packages in R, you get a bunch of functions you can use. But you can also create these on your own to simplify your analyses! You do this with the following syntax MyNewFunction &lt;- function(param1, param2){ code } Whatever the last line of the “code” portion of the function spits out, gets returned from the function. So if you said X &lt;- mynewfunction(param1, parm2) X would now have in it whatever your function returned. See a simple example below: a function that adds 1 to any number we pass to it. add1 &lt;- function(number){ number + 1 } add1(4) ## [1] 5 12.11 Create a return period function Let’s create a function that returns the return period for a flood of any magnitude for the gage we are investigating. Creating functions is a great way to streamline your workflow. You can write a function that performs an operation you need to perform a bunch of times, then just use the function rather than re-writing/copying the code. Our function will be called “ReturnPeriod” and we will pass it the flow we want the return period for, and the u and alpha of the distribution. We will test the function by having it calculate the return period for the 100 year flood we calculated earlier (120027). If it works, it should spit out 100. ReturnPeriod &lt;- function(flow, u, alpha){ pTheoretical = exp(-exp(-((flow - u) / alpha))) TpTheoretical = (1 / (1 - pTheoretical)) TpTheoretical } ReturnPeriod(120027, u, alpha) ## [1] 99.99898 12.12 Challenge: Create a function to compute the 1 in 100 chance flood for any USGS gage Create a function that returns the magnitude of the 100 year flood when given a USGS gage id, startdate, and enddate for the period you want to investigate. "],["rgeospatial.html", "Chapter 13 Geospatial data in R - Vector 13.1 Goals 13.2 Intro to tmap 13.3 Data wrangling with tidyverse principles 13.4 Add non-spatial data to spatial data with a join 13.5 Plot maps side by side 13.6 Built in styles, like themes in ggplot 13.7 Interactive Maps", " Chapter 13 Geospatial data in R - Vector The following activity is available as a template github repository at the following link: https://github.com/VT-Hydroinformatics/12-Intro_Geospatial_Vector For more: https://datacarpentry.org/r-raster-vector-geospatial/ Much of this is adapted from: https://geocompr.robinlovelace.net/index.html Chapter 8 Load necessary packages and data (spData and spDataLarge are data packages) #install.packages(&#39;spDataLarge&#39;, repos=&#39;https://nowosad.github.io/drat/&#39;, #type=&#39;source&#39;) library(tidyverse) library(sf) library(raster) library(dplyr) library(spData) library(spDataLarge) library(tmap) # for static and interactive maps library(leaflet) # for interactive maps theme_set(theme_classic()) 13.1 Goals Our goals for this chapter are just to see some of the ways we can wrangle and plot vector spatial data using R. This is by no means the only way and is not an exhaustive demonstration of the packages loaded, but it’ll get us started. First, we need to define raster and vector spatial data. Check out the images below for two examples of the same data represented as raster data or vector data. Vector: Points, lines, polygons, boundaries are crisp regardless of scale Raster: Grid of same sized cells, vales in cells, cell size = resolution (smaller cells, higher resolution) Raster vs. Vector 1 Raster vs. Vector 2 Questions from these two images: What are the advantages/disadvantages of raster/vector for each? Which is best to show on a map for each? *For elevation, which would be better for calculating slope? So, today we are sticking to vector data, but then we will be deal primarily with raster elevation data. 13.2 Intro to tmap We are going to mape maps mostly with tmap. But there are several other options. Let’s look at how tmap works. It uses the same syntax as ggplot: the grammar of graphics. First we want to set tmap to static map mode. This is what we would want if we were making maps for a manuscript or a paper. You can also make interactive maps with tmap, which we will show later. Then we will have a look at the us_states data from the data package we loaded above. What extra information does the data have beyond a regular R object? Play around with it, can you reference columns in the table the same way you would with a regular object? #mape sure tmap is in static map mode tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting #look at the us_states shapefile data head(us_states) ## Simple feature collection with 6 features and 6 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -114.8136 ymin: 24.55868 xmax: -71.78699 ymax: 42.04964 ## CRS: EPSG:4269 ## GEOID NAME REGION AREA total_pop_10 total_pop_15 ## 1 01 Alabama South 133709.27 [km^2] 4712651 4830620 ## 2 04 Arizona West 295281.25 [km^2] 6246816 6641928 ## 3 08 Colorado West 269573.06 [km^2] 4887061 5278906 ## 4 09 Connecticut Norteast 12976.59 [km^2] 3545837 3593222 ## 5 12 Florida South 151052.01 [km^2] 18511620 19645772 ## 6 13 Georgia South 152725.21 [km^2] 9468815 10006693 ## geometry ## 1 MULTIPOLYGON (((-88.20006 3... ## 2 MULTIPOLYGON (((-114.7196 3... ## 3 MULTIPOLYGON (((-109.0501 4... ## 4 MULTIPOLYGON (((-73.48731 4... ## 5 MULTIPOLYGON (((-81.81169 2... ## 6 MULTIPOLYGON (((-85.60516 3... Let’s make a map showing the us_states data. Each state has coordinates to draw it in the dataset, and tmap knows how to deal with that. It uses the same format as ggplot, but instead of ggplot() you will use tm_shape(). Then the geoms are prefixed tm_, so we will use tm_fill to show a map of the US with states filled in with a color. # Pass the us_states data to tmap and fill the polygons (states) tm_shape(us_states) + tm_fill() If we use tm_borders instead, it will just outline the states. # Add border layer to shape tm_shape(us_states) + tm_borders() Or, like with ggplot, we can add multiple geoms. Let’s do fill AND outline. # Add fill and border layers to shape tm_shape(us_states) + tm_fill() + tm_borders() We can save these objects to view or edit later just like a ggplot object. We will save the above map as usa. Then we can use several built in geometries in tmap to add a compass, scale, and title. Note the syntax for specifying the position of the objects. You could do this all in one statement too if you wanted. #Save basic map object as &quot;usa&quot; usa &lt;- tm_shape(us_states) + tm_fill() + tm_borders() usa + tm_compass(type = &quot;8star&quot;, position = c(&quot;right&quot;, &quot;bottom&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;))+ tm_layout(title = &quot;United States&quot;, title.position = c(&quot;right&quot;, &quot;TOP&quot;)) Below is an example of how to edit the “symbology” of the map. In other words, we want to color each of the polygons depending on a variable. Here we make the states more blue if they have a higher population. The syntax below is basically (pseudo code): Represent us_states as shapes + color the shapes based on total_pop_10, use 10 colors, use the Blues palette add a legend in the bottom right, add some space for the title, define the title, position the title add a compass at the bottom left add a scale bar at the bottom left tm_shape(us_states) + tm_polygons(col = &quot;total_pop_10&quot;, n = 10, palette = &quot;Blues&quot;)+ tm_layout(legend.position = c(&quot;right&quot;, &quot;bottom&quot;), inner.margins = 0.1, title = &quot;United States Population in 2010&quot;, title.position = c(&quot;center&quot;, &quot;TOP&quot;))+ tm_compass(type = &quot;8star&quot;, position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) ## Scale bar set for latitude km and will be different at the top and bottom of the map. 13.3 Data wrangling with tidyverse principles You can use the same techniques as with other data to change or filter the spatial data. Below we filter to show just Virginia and then just to show the southern region. Note when we looked at us_states above there is a column called NAME for the state names and REGION for the region name. us_states %&gt;% filter(NAME == &quot;Virginia&quot;) %&gt;% tm_shape() + tm_fill() + tm_borders() Here we filter to the southern region and also add text labels with tm_text. us_states %&gt;% filter(REGION == &quot;South&quot;) %&gt;% tm_shape() + tm_fill() + tm_borders() + tm_text(&quot;NAME&quot;, size = 0.7) In addition to filtering, we can use the data in the geospatial table to calculate additional parameters, just like with a normal object. Below we calculate growth by subtracting the 2010 population from the 2015 population, and percent growth but dividing 2015-2010 by population in 2010 and multiplying by 100. us_states &lt;- us_states %&gt;% mutate(growth = total_pop_15 - total_pop_10) %&gt;% mutate(growthPer = ((total_pop_15-total_pop_10)/total_pop_10) * 100) head(us_states) ## Simple feature collection with 6 features and 8 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -114.8136 ymin: 24.55868 xmax: -71.78699 ymax: 42.04964 ## CRS: EPSG:4269 ## GEOID NAME REGION AREA total_pop_10 total_pop_15 ## 1 01 Alabama South 133709.27 [km^2] 4712651 4830620 ## 2 04 Arizona West 295281.25 [km^2] 6246816 6641928 ## 3 08 Colorado West 269573.06 [km^2] 4887061 5278906 ## 4 09 Connecticut Norteast 12976.59 [km^2] 3545837 3593222 ## 5 12 Florida South 151052.01 [km^2] 18511620 19645772 ## 6 13 Georgia South 152725.21 [km^2] 9468815 10006693 ## geometry growth growthPer ## 1 MULTIPOLYGON (((-88.20006 3... 117969 2.503241 ## 2 MULTIPOLYGON (((-114.7196 3... 395112 6.325014 ## 3 MULTIPOLYGON (((-109.0501 4... 391845 8.018009 ## 4 MULTIPOLYGON (((-73.48731 4... 47385 1.336356 ## 5 MULTIPOLYGON (((-81.81169 2... 1134152 6.126703 ## 6 MULTIPOLYGON (((-85.60516 3... 537878 5.680521 Now we can plot our newly calculated data by controlling color with that new column name. tm_shape(us_states) + tm_polygons(col = &quot;growthPer&quot;, n = 7, palette = &quot;Blues&quot;, title = &quot;% of 2010 Pop&quot;)+ #do growth and growth per tm_layout(legend.position = c(&quot;right&quot;, &quot;bottom&quot;), inner.margins = 0.1, title = &quot;United States Population Growth 2010-2015&quot;, title.position = c(&quot;center&quot;, &quot;TOP&quot;))+ tm_compass(type = &quot;8star&quot;, position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) ## Scale bar set for latitude km and will be different at the top and bottom of the map. 13.4 Add non-spatial data to spatial data with a join We have been using us_states. There is another dataset called us_states_df that has even more data, but it is just a regular tibble, not a geospatial file. We need to attach data from us_states_df to the us_states geospatial file based on state name. How in the world will we do that? A JOIN!! In us_states the state names are in a column called NAME and in us_states_df they are in a column called state. So when we do the join, we need to tell R that these columns are the same and we want to use them to match the values. We will do a left join to accomplish this. To review joins, check out chapter 7 #this says: join us_states and us_states_df by using the NAME and state columns st_income &lt;- left_join(us_states, us_states_df, by = c(&quot;NAME&quot; = &quot;state&quot;)) head(st_income) ## Simple feature collection with 6 features and 12 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -114.8136 ymin: 24.55868 xmax: -71.78699 ymax: 42.04964 ## CRS: EPSG:4269 ## GEOID NAME REGION AREA total_pop_10 total_pop_15 growth ## 1 01 Alabama South 133709.27 [km^2] 4712651 4830620 117969 ## 2 04 Arizona West 295281.25 [km^2] 6246816 6641928 395112 ## 3 08 Colorado West 269573.06 [km^2] 4887061 5278906 391845 ## 4 09 Connecticut Norteast 12976.59 [km^2] 3545837 3593222 47385 ## 5 12 Florida South 151052.01 [km^2] 18511620 19645772 1134152 ## 6 13 Georgia South 152725.21 [km^2] 9468815 10006693 537878 ## growthPer median_income_10 median_income_15 poverty_level_10 poverty_level_15 ## 1 2.503241 21746 22890 786544 887260 ## 2 6.325014 26412 26156 933113 1180690 ## 3 8.018009 29365 30752 584184 653969 ## 4 1.336356 32258 33226 314306 366351 ## 5 6.126703 24812 24654 2502365 3180109 ## 6 5.680521 25596 25588 1445752 1788947 ## geometry ## 1 MULTIPOLYGON (((-88.20006 3... ## 2 MULTIPOLYGON (((-114.7196 3... ## 3 MULTIPOLYGON (((-109.0501 4... ## 4 MULTIPOLYGON (((-73.48731 4... ## 5 MULTIPOLYGON (((-81.81169 2... ## 6 MULTIPOLYGON (((-85.60516 3... And now we can plot this formerly non-spatial data on our map. #now the us_states_df columns are available for us to use when mapping tm_shape(st_income) + tm_polygons(col = &quot;median_income_10&quot;, n = 7)+ tm_compass(type = &quot;8star&quot;, position = c(&quot;right&quot;, &quot;bottom&quot;)) + tm_scale_bar(position = c(&quot;right&quot;, &quot;bottom&quot;)) 13.5 Plot maps side by side Just like we can use facets in ggplot, we can use facets to show multiple maps. Below we show median income in 2010 and 2015 next to each other using tm_facets. facets = c(&quot;median_income_10&quot;, &quot;median_income_15&quot;) tm_shape(st_income) + tm_polygons(facets) + tm_facets(ncol = 1, sync = TRUE) 13.6 Built in styles, like themes in ggplot We can use these styles with tm_style. Try “classic,” “coblat,” or “col_blind” below. tm_shape(us_states)+ tm_polygons(col = &quot;growthPer&quot;, n = 7, palette = &quot;Blues&quot;, title = &quot;% of 2010 Pop&quot;)+ #do growth and growth per tm_style(&quot;classic&quot;) #try cobalt, bw, col_blind 13.7 Interactive Maps 13.7.1 tmap You can also generate maps that you can interact with, as opposed to static maps, that we have been using before. If you are generating a map for an app or webpage, this may be a good choice. But for a pdf report, the static maps are more appropriate. In tmap all you have to do is run tmap_mode(“view”) and it will create an interactive map with the exact same syntax! To switch back to a static map, run tmap_mode(“plot”) Also in this chunk we see how to add a basemap to a tmap object. tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing popgrowth &lt;- tm_shape(us_states) + tm_polygons(col = &quot;growthPer&quot;, n = 7, palette = &quot;Blues&quot;, title = &quot;% of 2010 Pop&quot;, alpha = 0.7)+ #mess with alpha tm_layout(legend.position = c(&quot;right&quot;, &quot;bottom&quot;), inner.margins = 0.1, title = &quot;United States Population Growth 2010-2015&quot;, title.position = c(&quot;center&quot;, &quot;TOP&quot;))+ tm_compass(type = &quot;8star&quot;, position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) popgrowth + tm_basemap(server = &quot;OpenTopoMap&quot;) ## Compass not supported in view mode. ## legend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode. 13.7.2 Leaflet Leaflet is another way to make interactive maps. It’s syntax is very different, as you can see below. But depending on what functionality you need, it could be a better choice. leaflet(us_states) %&gt;% addTiles() %&gt;% addPolygons(color = &quot;#444444&quot;, weight = 1, smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.5, fillColor = ~colorQuantile(&quot;YlOrRd&quot;, total_pop_10)(total_pop_10)) ## Warning: sf layer has inconsistent datum (+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ). ## Need &#39;+proj=longlat +datum=WGS84&#39; "]]
